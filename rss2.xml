<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>WONDEROMG</title>
    <link>https://wonderomg.github.io/</link>
    
    <atom:link href="https://wonderomg.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>wonderomg&#39;s blog</description>
    <pubDate>Thu, 13 Jan 2022 16:04:09 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>mongodb学习笔记--实现自增ID序列</title>
      <link>https://wonderomg.github.io/2020/09/25/mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%A2%9EID%E5%BA%8F%E5%88%97/</link>
      <guid>https://wonderomg.github.io/2020/09/25/mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%A2%9EID%E5%BA%8F%E5%88%97/</guid>
      <pubDate>Fri, 25 Sep 2020 12:46:25 GMT</pubDate>
      
      <description>&lt;p&gt;　　在某些特定的场景下，我们可能需要利用数据的自增id特性来作为数据集的自增排序查找等操作。或者相同的数据分布在多份存储上。&lt;/p&gt;
&lt;p&gt;并且存在对条数据需要通过这个id进行关联，类似于外键特性，这就需要将id和数据分离。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>　　在某些特定的场景下，我们可能需要利用数据的自增id特性来作为数据集的自增排序查找等操作。或者相同的数据分布在多份存储上。</p><p>并且存在对条数据需要通过这个id进行关联，类似于外键特性，这就需要将id和数据分离。</p><span id="more"></span><p>流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">id--&gt;DB1</span><br><span class="line">id--&gt;DB2</span><br><span class="line">DB1--&gt;合并数据</span><br><span class="line">DB2--&gt;合并数据</span><br></pre></td></tr></table></figure><p>这里列举了mysql、oracle、mongodb三种数据的自增序列实现方式。</p><h2 id="1、mysql的自增id"><a href="#1、mysql的自增id" class="headerlink" title="1、mysql的自增id"></a>1、mysql的自增id</h2><p>​        mysql的自增id是和数据绑定在一起的，无法分开，等于你id的增加是伴随着数据库的数据新增而来。</p><p>那有没有办法分开呢？</p><p>​        也是有的，需要借助数据库函数来实现。但是一般不建议使用，需要对函数进行分析加参数修饰，如函数里加关键字<code>READS SQL DATA</code>（只查询时使用）、<code>DETERMINISTIC</code>（存在更新时使用），不然数据库会告警，会一定程度影响dml性能。</p><p>其原理就是每查询一次更新sequence的值。</p><p>具体实现步骤如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--1、新建序列表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> test_sequence;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test_sequence (</span><br><span class="line">seq_name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 序列名称</span></span><br><span class="line">current_val <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 当前值</span></span><br><span class="line">increment_val <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>, <span class="comment">-- 步长(跨度)</span></span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (seq_name));</span><br><span class="line"> </span><br><span class="line"><span class="comment">--2、新增一个序列</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_sequence <span class="keyword">VALUES</span> (<span class="string">&#x27;user_seq&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_sequence <span class="keyword">VALUES</span> (<span class="string">&#x27;class_seq&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_sequence <span class="keyword">VALUES</span> (<span class="string">&#x27;school_seq&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_sequence <span class="keyword">VALUES</span> (<span class="string">&#x27;data_seq&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">--3、创建currval函数，用于获取序列当前值</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> seq_currval(v_seq_name <span class="type">VARCHAR</span>(<span class="number">50</span>))</span><br><span class="line"><span class="keyword">returns</span> <span class="type">bigint</span>(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">value</span> <span class="type">integer</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">select</span> current_val <span class="keyword">into</span> <span class="keyword">value</span> <span class="keyword">from</span> test_sequence <span class="keyword">where</span> seq_name <span class="operator">=</span> v_seq_name;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">--4、查询当前值</span></span><br><span class="line"><span class="keyword">select</span> seq_currval(<span class="string">&#x27;ge_rns_user_info_seq&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">--5、创建nextval函数，用于获取序列下一个值</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> seq_nextval (v_seq_name <span class="type">VARCHAR</span>(<span class="number">50</span>)) <span class="keyword">returns</span> <span class="type">bigint</span>(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">update test_sequence <span class="keyword">set</span> current_val <span class="operator">=</span> current_val <span class="operator">+</span> increment_val <span class="keyword">where</span> seq_name <span class="operator">=</span> v_seq_name;</span><br><span class="line"><span class="keyword">return</span> seq_currval(v_seq_name);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">--6、查询下一个值</span></span><br><span class="line"><span class="keyword">select</span> seq_nextval(<span class="string">&#x27;user_seq&#x27;</span>);</span><br><span class="line"><span class="comment">--7、查询所有sequence</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_sequence;</span><br></pre></td></tr></table></figure><p>使用</p><h2 id="2、oracle的自增sequence"><a href="#2、oracle的自增sequence" class="headerlink" title="2、oracle的自增sequence"></a>2、oracle的自增sequence</h2><p>oracle的自增sequence是独立于数据的，对于迁移维护比较方便。具体使用如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--1、首先建一个表TEST</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> TEST</span><br><span class="line">(</span><br><span class="line">  NID <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  test1 varchar2(<span class="number">20</span>),</span><br><span class="line">  test2 varchar2(<span class="number">20</span>),</span><br><span class="line">  test3 varchar2(<span class="number">20</span>),</span><br><span class="line">  test4 varchar2(<span class="number">20</span>),</span><br><span class="line">  test5 varchar2(<span class="number">20</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">--2、再建一个序列SEQ_TEST</span></span><br><span class="line"><span class="keyword">create</span> sequence SEQ_TEST</span><br><span class="line">minvalue <span class="number">1</span>        <span class="comment">--最小值</span></span><br><span class="line">nomaxvalue        <span class="comment">--不设置最大值</span></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">with</span> <span class="number">1</span>      <span class="comment">--从1开始计数</span></span><br><span class="line">increment <span class="keyword">by</span> <span class="number">1</span>    <span class="comment">--每次加1个</span></span><br><span class="line">nocycle           <span class="comment">--一直累加，不循环</span></span><br><span class="line">nocache;          <span class="comment">--不建缓冲区</span></span><br></pre></td></tr></table></figure><p>然后在项目的mybatis中使用下面的语句赋值到数据<code>id</code>上即可；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SEQ_TEST <span class="keyword">FROM</span> DUAL</span><br></pre></td></tr></table></figure><p>就是这么的简单，so easy!</p><h2 id="3、mongo实现自动增长sequence"><a href="#3、mongo实现自动增长sequence" class="headerlink" title="3、mongo实现自动增长sequence"></a>3、mongo实现自动增长sequence</h2><p>严格来说mongodb本身没有自增序列相关的功能，但是我们了解到mongodb提供了原子操作的函数<code>$inc</code>，既然是原子操作，那么就可以在这上面做文章，自增id也是全局唯一，那么有了原子操作，我们的自增操作就能够满足。在每次进行插入操作的时候，序列值加1，作为本次操作的id。</p><p>具体实现如下：</p><h3 id="1、定义sequence对象"><a href="#1、定义sequence对象" class="headerlink" title="1、定义sequence对象"></a>1、定义sequence对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoSequence</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> nextVal;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getNextVal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextVal</span><span class="params">(<span class="keyword">long</span> nextVal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nextVal = nextVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、创建自增序列工具类"><a href="#2、创建自增序列工具类" class="headerlink" title="2、创建自增序列工具类"></a>2、创建自增序列工具类</h3><p>取号工具类MongoAutoIdUtil.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoAutoIdUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getNextSequenceByCol</span><span class="params">(String collectionName)</span> </span>&#123;</span><br><span class="line">        MongoSequence sequence =</span><br><span class="line">            mongoTemplate.findAndModify(Query.query(where(<span class="string">&quot;_id&quot;</span>).is(collectionName)),</span><br><span class="line">                <span class="keyword">new</span> Update().inc(<span class="string">&quot;nextVal&quot;</span>, <span class="number">1L</span>), options().upsert(<span class="keyword">true</span>).returnNew(<span class="keyword">true</span>),</span><br><span class="line">                MongoSequence.class);</span><br><span class="line">        <span class="keyword">return</span> sequence.getNextVal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有没有发现这里的update操作并没有集合名称，那么具体是更新哪个集合呢？会不会失败？</p><p>别担心，如果不设置集合的话，执行的时候mongodb自己会新增一个默认集合名字叫<code>mongoSequence</code>，所以我们只需要调用这个方法，传入我们想要的序列名即可。然后在mongodb控制台中就能看到<code>mongoSequence</code>集合中存在了我们想要的需要，每次只要调用这个方法获取的就是自增的id。</p><h3 id="3、函数性能"><a href="#3、函数性能" class="headerlink" title="3、函数性能"></a>3、函数性能</h3><p>那这个函数的性能怎样呢？</p><p>性能的话，我稍微测试了下，50~200个并发取id没有出现id重复的情况，并且自增无误。再高的并发本机4核cpu太弱，测试就不再具有参考性，就作罢了。</p><p>官方的解释是<code>inc</code>与<code>set</code>性能相当，比<code>$push</code>快。</p><p>在实际运用过程当中也没有出现重复取和自增出错的情况，运行良好。</p><p>不过既然选择了mongodb，那么最好利用非关系数据库的特性，发挥它最大的性能，不要将自增id这样的场景放在mongodb上操作。</p><p>比如它本身的<code>_id</code>其实就是个很好的全局唯一并且支持排序的序列，当然我们也可以对<code>_id</code>进行赋值，设置我们自己的数据类型，比如设置为上面的自增id的数字，但是不推荐。</p><p>官方针对<code>_id</code>的有解释，少量数据量的情况下，对<code>_id</code>进行赋值和不赋值性能差别不大，但达到一定数据量的时候，<code>_id</code>自动赋值比手动赋值性能要好，因为需要额外对我们手动赋的值做一次多分片全局唯一性的检查操作，这没有mongodb自己的生成算法来得快。</p>]]></content:encoded>
      
      
      <category domain="https://wonderomg.github.io/categories/mongodb/">mongodb</category>
      
      
      <category domain="https://wonderomg.github.io/tags/mongodb/">mongodb</category>
      
      
      <comments>https://wonderomg.github.io/2020/09/25/mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%A2%9EID%E5%BA%8F%E5%88%97/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>mongodb学习笔记--分页查询优化</title>
      <link>https://wonderomg.github.io/2020/09/13/mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</link>
      <guid>https://wonderomg.github.io/2020/09/13/mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</guid>
      <pubDate>Sun, 13 Sep 2020 13:32:20 GMT</pubDate>
      
      <description>&lt;p&gt;　　有时候我们在非关系数据库mongodb做一些简单的分析查询，比如分页。mongodb本身提供了分页的api，但是比较有限。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>　　有时候我们在非关系数据库mongodb做一些简单的分析查询，比如分页。mongodb本身提供了分页的api，但是比较有限。</p><span id="more"></span><h2 id="1、分页api"><a href="#1、分页api" class="headerlink" title="1、分页api"></a>1、分页api</h2><p>mongodb自身提供了类似mysql的分页关键字：</p><blockquote><p>查询时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query.skip((pageNum - <span class="number">1</span>)*pageSize).limit(pageSize);</span><br></pre></td></tr></table></figure></blockquote><p>需要是跳跃查询，但是达到一定数据量级的，查询效率很低，甚至查不动。</p><p>skip达到一定数据量时，超过了系统默认的32MB内存排序，所以mongo重新使用了其他算法排序，出现大量扫描，导致慢查询。</p><p>这个写法和mysql的<code>limit offset,rows</code>类似：</p><blockquote><p>下面两条语句是等价的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> <span class="keyword">collect</span> limit <span class="number">1000000</span>,<span class="number">10</span>;</span><br><span class="line">#<span class="operator">*</span><span class="operator">*</span>MySQL5<span class="number">.0</span>之后支持该语法<span class="operator">*</span><span class="operator">*</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> <span class="keyword">collect</span> limit <span class="number">10</span> <span class="keyword">offset</span> <span class="number">1000000</span>;</span><br></pre></td></tr></table></figure></blockquote><p>等于是一直往后读取到第1000000条，开始取10条，读取了1000000没用的数据，mysql的优化方式是找到第1000000条数据的id，开始读取10条，主要是利用索引位置来定位分页起始位：</p><blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> <span class="keyword">collect</span> <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">1000000</span> limit <span class="number">10</span>;</span><br></pre></td></tr></table></figure></blockquote><p>查询过程经过了<code>pageNum*pageSize</code>条数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">web--&gt;pageNum</span><br><span class="line">web--&gt;pageSize</span><br><span class="line">pageNum--&gt;pageNum*pageSize</span><br><span class="line">pageSize--&gt;pageNum*pageSize</span><br><span class="line">pageNum*pageSize--&gt;skip</span><br><span class="line">skip--&gt;limit第pageNum页的数据</span><br></pre></td></tr></table></figure><h2 id="2、优化方向"><a href="#2、优化方向" class="headerlink" title="2、优化方向"></a>2、优化方向</h2><p>等官方优化<code>skip()</code>确定时间，毕竟mongo使用场景也大多不是用来分页，那么只能避免使用<code>skip()</code>。不使用<code>skip()</code>那怎么优化呢？我们借助其他函数曲线救国，比如<code>sort()</code>排序和 <code>limit()</code> ，和mysql的优化方向一样，知道起始id再查询当前页，理论上会快很多。相当于跳过了<code>pageNum*pageSize</code>条数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">web--&gt;pageNum</span><br><span class="line">web--&gt;pageSize</span><br><span class="line">pageNum--&gt;pageNum*pageSize的数据_id</span><br><span class="line">pageSize--&gt;pageNum*pageSize的数据_id</span><br><span class="line">pageNum*pageSize的数据_id--&gt;使用$gt函数大于_id</span><br><span class="line">pageNum*pageSize的数据_id--&gt;skip跳页pageSize</span><br><span class="line">使用$gt函数大于_id--&gt;第pageNum页的数据</span><br><span class="line">skip跳页pageSize--&gt;第pageNum页的数据</span><br></pre></td></tr></table></figure><h2 id="3、实现"><a href="#3、实现" class="headerlink" title="3、实现"></a>3、实现</h2><p>对象中设置<code>id</code>属性即可得到<code>_id</code>的值，String的话得到一串十六进制的字符构成的字符串，具体构成可查看<code>ObjectId</code>的构成。</p><blockquote><p> 假设实体对象为Goods，设置id属性：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String id;</span><br></pre></td></tr></table></figure></blockquote><p>将得到<code>_id</code>设置为分页的起始<code>_id</code>，，具体实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Goods&gt; <span class="title">getListByPage</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">    List&lt;Goods&gt; goodsList;</span><br><span class="line"></span><br><span class="line">    Query query = <span class="keyword">new</span> Query();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 _id 正序排序</span></span><br><span class="line">    query.with(Sort.by(Sort.Direction.ASC, <span class="string">&quot;_id&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pageNum != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// number 参数是为了查上一页的最后一条数据</span></span><br><span class="line">        <span class="keyword">int</span> number = (pageNum - <span class="number">1</span>) * pageSize;</span><br><span class="line">        query.limit(number);</span><br><span class="line"></span><br><span class="line">        List&lt;Goods&gt; goodsListTemp = mongoTemplate.find(query, Goods.class);</span><br><span class="line">        <span class="comment">// 取出最后一条</span></span><br><span class="line">        Goods goods = goodsListTemp.get(goodsListTemp.size() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取到上一页的最后一条数据_id，当作条件查接下来的数据</span></span><br><span class="line">        String id = goods.getId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从上一页最后一条开始查（大于不包括这一条）</span></span><br><span class="line">        query.addCriteria(Criteria.where(<span class="string">&quot;_id&quot;</span>).gt(id));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 页大小重新赋值，覆盖 number 参数</span></span><br><span class="line">    query.limit(pageSize);</span><br><span class="line">    <span class="comment">// 即可得到第n页数据</span></span><br><span class="line">    goodsList = mongoTemplate.find(query, Goods.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> goodsList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的避免了<code>skip()</code>的使用，通过<code>sort()</code>排序和 <code>limit()</code> 限制数据大小结合排序，每一次分页查询从数据的上一页的最后一条数据作为起始位置，再查询页大小的数据量。</p><h2 id="4、建议"><a href="#4、建议" class="headerlink" title="4、建议"></a>4、建议</h2><p>从代码表现上来看，每一次查询都需要通过查询当前页之前的所有数据来得到起始位置的<code>_id</code>，相当于查询了大量数据，对内存消耗较大。</p><p>针对页数不是特别多的情况下，这种优化方式也是比<code>skip()</code>效率要高的。</p><p>如果页数特别多，每页size也较大，那么不管是什么类型的数据库压力也是比较大的，这种情况就需要从业务方面考量，不适合做分页，或者将分析型业务独立，这样的分析统计类操作可以放到<code>Elasticsearch</code>等更适合的存储上。</p>]]></content:encoded>
      
      
      <category domain="https://wonderomg.github.io/categories/mongodb/">mongodb</category>
      
      
      <category domain="https://wonderomg.github.io/tags/mongodb/">mongodb</category>
      
      <category domain="https://wonderomg.github.io/tags/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/">分页查询</category>
      
      
      <comments>https://wonderomg.github.io/2020/09/13/mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Elasticsearch实践(3)-api分页查询</title>
      <link>https://wonderomg.github.io/2018/05/17/Elasticsearch%E5%AE%9E%E8%B7%B5api%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</link>
      <guid>https://wonderomg.github.io/2018/05/17/Elasticsearch%E5%AE%9E%E8%B7%B5api%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</guid>
      <pubDate>Wed, 16 May 2018 16:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;elasticsearch系列：&lt;/p&gt;
&lt;p&gt;(1)&lt;a href=&quot;https://wonderomg.github.io/2018/05/15/Elasticsearch%E5%AE%9E%E8%B7%B5%E6%90%AD%E5%BB%BA%E5%8F%8AIK%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/&quot;&gt;Elasticsearch实践(1)-搭建及IK中文分词&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(2)&lt;a href=&quot;https://wonderomg.github.io/2018/05/16/Elasticsearch%E5%AE%9E%E8%B7%B5%E7%B4%A2%E5%BC%95%E5%8F%8A%E7%B4%A2%E5%BC%95%E5%88%AB%E5%90%8Dalias/&quot;&gt;Elasticsearch实践(2)-索引及索引别名alias&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(3)&lt;a href=&quot;https://wonderomg.github.io/2018/05/17/Elasticsearch%E5%AE%9E%E8%B7%B5api%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/&quot;&gt;Elasticsearch实践(3)-api分页查询&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;es分页有两种，from size浅分页和scroll深分页，这里对这两种分页都做了实现，使用的是es的java api。from size类似于mysql的limit分页，from偏移，默认为0，size为返回的结果数量，默认为10。在数据量不大的情况下一般会使用from size，数据量大的时候效率比较低，而且很费内存，每次会把from*size条记录全部加载到内存中，对结果返回前进行全局排序，然后丢弃掉范围外的结果，重复这样的操作会导致内存占用过大而使es挂掉，并且受数据条数限制，10000条，需修改索引限制。🤔&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>elasticsearch系列：</p><p>(1)<a href="https://wonderomg.github.io/2018/05/15/Elasticsearch%E5%AE%9E%E8%B7%B5%E6%90%AD%E5%BB%BA%E5%8F%8AIK%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/">Elasticsearch实践(1)-搭建及IK中文分词</a></p><p>(2)<a href="https://wonderomg.github.io/2018/05/16/Elasticsearch%E5%AE%9E%E8%B7%B5%E7%B4%A2%E5%BC%95%E5%8F%8A%E7%B4%A2%E5%BC%95%E5%88%AB%E5%90%8Dalias/">Elasticsearch实践(2)-索引及索引别名alias</a></p><p>(3)<a href="https://wonderomg.github.io/2018/05/17/Elasticsearch%E5%AE%9E%E8%B7%B5api%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/">Elasticsearch实践(3)-api分页查询</a></p><p>es分页有两种，from size浅分页和scroll深分页，这里对这两种分页都做了实现，使用的是es的java api。from size类似于mysql的limit分页，from偏移，默认为0，size为返回的结果数量，默认为10。在数据量不大的情况下一般会使用from size，数据量大的时候效率比较低，而且很费内存，每次会把from*size条记录全部加载到内存中，对结果返回前进行全局排序，然后丢弃掉范围外的结果，重复这样的操作会导致内存占用过大而使es挂掉，并且受数据条数限制，10000条，需修改索引限制。🤔</p><span id="more"></span><p>scroll分页通俗来说就是滚屏翻页，设置每页查询数量之后，每次查询会返回一个scroll_id，即当前文档的位置，下次查询再传这个scroll_id给es返回下一页的数据以及一个新的scroll_id，类似于按书页码顺序翻书和游标，遗憾的是不支持跳页。🤔适用于不需要跳页持续批量拉取结果、对所有数据分页或一次性查询大量数据的场景，这种记录文档位置的查询方式效率非常高，也就是常说的倒排索引。下面使用java api实现这两种分页效果。</p><h2 id="1-使用from-size查询"><a href="#1-使用from-size查询" class="headerlink" title="1. 使用from size查询"></a>1. 使用from size查询</h2><p>使用 from and size 的深度分页，比如说 <code>?size=10&amp;from=10000</code> 是非常低效的，<br>因为 100,000 排序的结果必须从每个分片上取出并重新排序最后返回 10 条。这个过程需要对每个请求页重复。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST 10.10.13.234:9200/goods/fulltext/_search -H &#x27;Content-Type:application/json&#x27; -d&#x27;</span><br><span class="line">&#123; &quot;from&quot; : 0, &quot;size&quot; : 10,</span><br><span class="line">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;content&quot; : &quot;进口水果&quot; &#125;&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure><h2 id="2-使用scroll查询"><a href="#2-使用scroll查询" class="headerlink" title="2. 使用scroll查询"></a>2. 使用scroll查询</h2><p>使用scroll查询，需要设置<code>scroll_id</code>的失效时间。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl &#x27;10.10.13.234:9200/index/skuId/_search?scroll=1m&#x27;  -d &#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;name&quot; : &quot;进口水果&quot; &#125;&#125;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><p>会返回<code>scroll_id</code>，根据这个<code>scroll_id</code>进行下一次查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET 10.10.13.234:9200/jd_mall_v2/_search?pretty&amp;scroll=2m -d &#123;&quot;query&quot;:&#123;&quot;match_all&quot;:&#123;&#125;&#125;&#125;</span><br><span class="line">curl -XGET &#x27;10.10.13.234:9200/jd_mall_v2/_search?pretty&amp;scroll=2m&amp;search_type=scan&#x27; -d &#x27;&#123;&quot;size&quot;:3,&quot;query&quot;:&#123;&quot;match_all&quot;:&#123;&#125;&#125;&#125;&#x27;</span><br><span class="line">curl –XGET &#x27;10.10.13.234:9200/_search/scroll?scroll=2m&amp;pretty</span><br><span class="line">&amp;scroll_id=c2Nhbjs1OzcyNTY6N1UtOEx3MmhSQXk2SjFnamw4bk9OUTs3MjYwOjdVLThMdzJoUkF5NkoxZ2psOG5PTlE7NzI1Nzo3VS04THcyaFJBeTZKMWdqbDhuT05ROzcyNTg6N1UtOEx3MmhSQXk2SjFnamw4bk9OUTs3MjU5OjdVLThMdzJoUkF5NkoxZ2psOG5PTlE7MTt0b3RhbF9oaXRzOjUxNTM3MDs=&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-使用es的java-api操作"><a href="#1-使用es的java-api操作" class="headerlink" title="1. 使用es的java api操作"></a>1. 使用es的java api操作</h2><p>java api可查阅<a href="https://es.quanke.name/%EF%BC%8C">https://es.quanke.name/，</a></p><p>创建springboot工程，可以在<a href="http://start.spring.io/">http://start.spring.io/</a></p><p>下载springboot工程模板，也可在github:<a href="https://github.com/wonderomg/elasticsearch-visual">https://github.com/wonderomg/elasticsearch-visual</a>下载本工程。</p><p>(1)导入es的maven依赖，pom.xml内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Elasticsearch核心依赖包 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.elasticsearch/elasticsearch --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-1-判断索引是否存在"><a href="#1-1-判断索引是否存在" class="headerlink" title="1.1  判断索引是否存在"></a>1.1  判断索引是否存在</h3><p>检验索引是否创建成功，是否存在，通过prepareExists查询指定索引；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.判断索引是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIndexExists</span><span class="params">(Client client, String index)</span> </span>&#123;</span><br><span class="line">        IndicesAdminClient indicesAdminClient = client.admin().indices();</span><br><span class="line">        IndicesExistsResponse response = indicesAdminClient.prepareExists(index).get();</span><br><span class="line">        <span class="keyword">return</span> response.isExists();</span><br><span class="line">        <span class="comment">/* 另一种方式</span></span><br><span class="line"><span class="comment">        IndicesExistsRequest indicesExistsRequest = new IndicesExistsRequest(index);</span></span><br><span class="line"><span class="comment">        IndicesExistsResponse response = client.admin().indices().exists(indicesExistsRequest).actionGet();*/</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-判断类型是否存在"><a href="#1-2-判断类型是否存在" class="headerlink" title="1.2 判断类型是否存在"></a>1.2 判断类型是否存在</h3><p>类型存在的检查与索引的检查类似，只不过类型只挂在索引下，所以需要先指定索引名，然后再查询类型是否存在；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2.判断类型是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTypeExists</span><span class="params">(Client client, String index, String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isIndexExists(client, index)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        IndicesAdminClient indicesAdminClient = client.admin().indices();</span><br><span class="line">        TypesExistsResponse response = indicesAdminClient.prepareTypesExists(index).setTypes(type).get();</span><br><span class="line">        <span class="keyword">return</span> response.isExists();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-创建复杂索引"><a href="#1-3-创建复杂索引" class="headerlink" title="1.3 创建复杂索引"></a>1.3 创建复杂索引</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3.创建复杂索引，即有映射</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> indices</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clusterName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">createYxMapping</span><span class="params">(String indices, String type, String clusterName, String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Settings settings = Settings.settingsBuilder()</span><br><span class="line">                    .put(<span class="string">&quot;cluster.name&quot;</span>, clusterName)</span><br><span class="line">                    .put(<span class="string">&quot;client.transport.sniff&quot;</span>, <span class="keyword">true</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            Client client = TransportClient.builder().settings(settings).build()</span><br><span class="line">                    .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(host), port));</span><br><span class="line">            client.admin().indices().prepareCreate(indices).execute().actionGet();</span><br><span class="line">            <span class="keyword">new</span> XContentFactory();</span><br><span class="line">            XContentBuilder builder = XContentFactory.jsonBuilder()</span><br><span class="line">                    .startObject()</span><br><span class="line">                    .startObject(type)</span><br><span class="line">                    .startObject(<span class="string">&quot;properties&quot;</span>)</span><br><span class="line">                    .startObject(<span class="string">&quot;name&quot;</span>).field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;string&quot;</span>).field(<span class="string">&quot;store&quot;</span>, <span class="string">&quot;yes&quot;</span>).field(<span class="string">&quot;analyzer&quot;</span>, <span class="string">&quot;ik&quot;</span>).field(<span class="string">&quot;index&quot;</span>, <span class="string">&quot;analyzed&quot;</span>).endObject()</span><br><span class="line">                    .startObject(<span class="string">&quot;num&quot;</span>).field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;long&quot;</span>).endObject()</span><br><span class="line">                    .startObject(<span class="string">&quot;sex&quot;</span>).field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;string&quot;</span>).field(<span class="string">&quot;index&quot;</span>, <span class="string">&quot;not_analyzed&quot;</span>).endObject()</span><br><span class="line">                    .endObject()</span><br><span class="line">                    .endObject()</span><br><span class="line">                    .endObject();</span><br><span class="line">            PutMappingRequest mapping = Requests.putMappingRequest(indices).type(type).source(builder);</span><br><span class="line"></span><br><span class="line">            client.admin().indices().putMapping(mapping).actionGet();</span><br><span class="line">            client.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;createMapping error &quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-创建空索引"><a href="#1-4-创建空索引" class="headerlink" title="1.4 创建空索引"></a>1.4 创建空索引</h3><p>创建一个空索引，无映射mapping，当我们设计好mapping的相关设置再映射即可，空索引创建如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 4.创建空索引  默认setting 无mapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">createSimpleIndex</span><span class="params">(Client client, String index)</span></span>&#123;</span><br><span class="line">    IndicesAdminClient indicesAdminClient = client.admin().indices();</span><br><span class="line">    CreateIndexResponse response = indicesAdminClient.prepareCreate(index).get();</span><br><span class="line">    <span class="keyword">return</span> response.isAcknowledged();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-为空索引映射mapping"><a href="#1-5-为空索引映射mapping" class="headerlink" title="1.5 为空索引映射mapping"></a>1.5 为空索引映射mapping</h3><p>可以为空索引创建或修改索引的映射，需要确保索引存在，否则会报错，使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 5.设置映射</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">putIndexMapping</span><span class="params">(Client client, String index, String type)</span></span>&#123;</span><br><span class="line">    <span class="comment">// mapping</span></span><br><span class="line">    XContentBuilder mappingBuilder;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mappingBuilder = XContentFactory.jsonBuilder()</span><br><span class="line">                .startObject()</span><br><span class="line">                .startObject(type)</span><br><span class="line">                .startObject(<span class="string">&quot;properties&quot;</span>)</span><br><span class="line">                .startObject(<span class="string">&quot;name&quot;</span>).field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;string&quot;</span>).field(<span class="string">&quot;store&quot;</span>, <span class="string">&quot;yes&quot;</span>).field(<span class="string">&quot;analyzer&quot;</span>, <span class="string">&quot;ik&quot;</span>).field(<span class="string">&quot;index&quot;</span>, <span class="string">&quot;analyzed&quot;</span>).endObject()</span><br><span class="line">                 .startObject(<span class="string">&quot;num&quot;</span>).field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;long&quot;</span>).endObject()</span><br><span class="line">                 .startObject(<span class="string">&quot;sex&quot;</span>).field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;string&quot;</span>).field(<span class="string">&quot;index&quot;</span>, <span class="string">&quot;not_analyzed&quot;</span>).endObject()</span><br><span class="line">                 .endObject()</span><br><span class="line">                 .endObject()</span><br><span class="line">                 .endObject();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;--------- createIndex 创建 mapping 失败：&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    IndicesAdminClient indicesAdminClient = client.admin().indices();</span><br><span class="line">    PutMappingResponse response = indicesAdminClient.preparePutMapping(index).setType(type).setSource(mappingBuilder).get();</span><br><span class="line">    <span class="keyword">return</span> response.isAcknowledged();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-删除索引"><a href="#1-6-删除索引" class="headerlink" title="1.6 删除索引"></a>1.6 删除索引</h3><p>删除索引api：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 6.删除索引</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteIndex</span><span class="params">(Client client, String index)</span> </span>&#123;</span><br><span class="line">        IndicesAdminClient indicesAdminClient = client.admin().indices();</span><br><span class="line">        DeleteIndexResponse response = indicesAdminClient.prepareDelete(index).execute().actionGet();</span><br><span class="line">        <span class="keyword">return</span> response.isAcknowledged();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-7-关闭索引"><a href="#1-7-关闭索引" class="headerlink" title="1.7 关闭索引"></a>1.7 关闭索引</h3><p>如果我们不想直接删除索引，而是仅仅短暂停止某个索引的使用，那么我们可以关闭索引的这个功能，只是短暂使用之，后续可能有恢复的需求，关闭使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 7.关闭索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">closeIndex</span><span class="params">(Client client, String index)</span></span>&#123;</span><br><span class="line">    IndicesAdminClient indicesAdminClient = client.admin().indices();</span><br><span class="line">    CloseIndexResponse response = indicesAdminClient.prepareClose(index).get();</span><br><span class="line">    <span class="keyword">return</span> response.isAcknowledged();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-8-打开索引"><a href="#1-8-打开索引" class="headerlink" title="1.8 打开索引"></a>1.8 打开索引</h3><p>既然有关闭索引，那么肯定也有重新打开索引的操作，使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 8.开启索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">openIndex</span><span class="params">(Client client, String index)</span></span>&#123;</span><br><span class="line">    IndicesAdminClient indicesAdminClient = client.admin().indices();</span><br><span class="line">    OpenIndexResponse response = indicesAdminClient.prepareOpen(index).get();</span><br><span class="line">    <span class="keyword">return</span> response.isAcknowledged();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-9-判断别名是否存在"><a href="#1-9-判断别名是否存在" class="headerlink" title="1.9 判断别名是否存在"></a>1.9 判断别名是否存在</h3><p>上一篇我们学习了索引别名的重要，所以api也不能落下，使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 9.判断别名是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAliasExist</span><span class="params">(Client client, String... aliases)</span> </span>&#123;</span><br><span class="line">        IndicesAdminClient indicesAdminClient = client.admin().indices();</span><br><span class="line">        AliasesExistResponse response = indicesAdminClient.prepareAliasesExist(aliases).get();</span><br><span class="line">        <span class="keyword">return</span> response.isExists();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-10-添加别名"><a href="#1-10-添加别名" class="headerlink" title="1.10 添加别名"></a>1.10 添加别名</h3><p>别名是映射到实际索引上，所以需要传入实际索引名以及要设置的别名alias，使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 10.添加别名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAlias</span><span class="params">(TransportClient client, String index, String alias)</span> </span>&#123;</span><br><span class="line">        IndicesAdminClient indicesAdminClient = client.admin().indices();</span><br><span class="line">        IndicesAliasesResponse response = indicesAdminClient.prepareAliases().addAlias(index, alias).get();</span><br><span class="line">        <span class="keyword">return</span> response.isAcknowledged();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-11-移除别名"><a href="#1-11-移除别名" class="headerlink" title="1.11 移除别名"></a>1.11 移除别名</h3><p>当然，添加的别名也可以删除，方便设置新的别名和切换索引别名，使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 11.移除别名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAlias</span><span class="params">(TransportClient client, String index, String alias)</span> </span>&#123;</span><br><span class="line">        IndicesAdminClient indicesAdminClient = client.admin().indices();</span><br><span class="line">        IndicesAliasesResponse response = indicesAdminClient.prepareAliases().removeAlias(index, alias).get();</span><br><span class="line">        <span class="keyword">return</span> response.isAcknowledged();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-12-删除一个别名后再添加一个别名"><a href="#1-12-删除一个别名后再添加一个别名" class="headerlink" title="1.12 删除一个别名后再添加一个别名"></a>1.12 删除一个别名后再添加一个别名</h3><p>这里实际上将删除与添加别名放在一起操作，所以需要传就别名和新别名，使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 12.删除一个别名后再添加一个</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAndCreateAlias</span><span class="params">(TransportClient client, String indexOld, String indexNew, String alias)</span> </span>&#123;</span><br><span class="line">        IndicesAdminClient indicesAdminClient = client.admin().indices();</span><br><span class="line">        IndicesAliasesResponse response = indicesAdminClient.prepareAliases().removeAlias(indexOld, alias)</span><br><span class="line">                .addAlias(indexNew, alias).get();</span><br><span class="line">        <span class="keyword">return</span> response.isAcknowledged();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-创建测试基类连接es"><a href="#2-创建测试基类连接es" class="headerlink" title="2. 创建测试基类连接es"></a>2. 创建测试基类连接es</h2><p>创建test类测试连接、插入、查询数据是否正常。</p><p>这里可以模拟一批数据插入es，后面的分页操作对大量数据才看得出效果，我这里有的40万数据加入到es中，方便后面的分页测试。</p><p>ElasticsearchTest.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.sun.controller.DateUtils;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.analyze.AnalyzeAction;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.analyze.AnalyzeRequestBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.analyze.AnalyzeResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.delete.DeleteResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.GetResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequestBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchType;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.update.UpdateResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.Client;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.Requests;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.unit.TimeValue;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentFactory;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.*;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类功能描述:Elasticsearch的基本测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/5/24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(ElasticsearchTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String HOST = <span class="string">&quot;10.10.13.234&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** http请求的端口是9200，客户端是9300 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> PORT = <span class="number">9300</span>;</span><br><span class="line"></span><br><span class="line">    Client client;</span><br><span class="line">    <span class="comment">/** 索引库名 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String index = <span class="string">&quot;my_index&quot;</span>;</span><br><span class="line">    <span class="comment">/** 类型名称 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String type = <span class="string">&quot;skuId&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String clusterName = <span class="string">&quot;my-application&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建mapping，注意：每次只能创建一次</span></span><br><span class="line"><span class="comment">     * 创建mapping(field(&quot;indexAnalyzer&quot;,&quot;ik&quot;)该字段分词IK索引 ；field(&quot;searchAnalyzer&quot;,&quot;ik&quot;)该字段分词ik查询；具体分词插件请看IK分词插件说明)</span></span><br><span class="line"><span class="comment">     * 创建mapping(field(&quot;analyzer&quot;,&quot;ik&quot;)该字段分词IK索引 ；field(&quot;index&quot;,&quot;analyzed&quot;)该字段分词ik查询；具体分词插件请看IK分词插件说明)2.x版</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> indices 索引名称；</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mappingType 类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createMapping</span><span class="params">()</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String indices = <span class="string">&quot;jd_mall_v2&quot;</span>;</span><br><span class="line">        String mappingType = <span class="string">&quot;goods&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Settings settings = Settings.settingsBuilder()</span><br><span class="line">                .put(<span class="string">&quot;cluster.name&quot;</span>, clusterName)</span><br><span class="line">                .put(<span class="string">&quot;client.transport.sniff&quot;</span>, <span class="keyword">true</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        Client client = TransportClient.builder().settings(settings).build()</span><br><span class="line">                .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(HOST), PORT));</span><br><span class="line"></span><br><span class="line">        client.admin().indices().prepareCreate(indices).execute().actionGet();</span><br><span class="line">        <span class="keyword">new</span> XContentFactory();</span><br><span class="line">        XContentBuilder builder=XContentFactory.jsonBuilder()</span><br><span class="line">                .startObject()</span><br><span class="line">                .startObject(mappingType)</span><br><span class="line">                .startObject(<span class="string">&quot;properties&quot;</span>)</span><br><span class="line">                .startObject(<span class="string">&quot;name&quot;</span>).field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;string&quot;</span>).field(<span class="string">&quot;store&quot;</span>, <span class="string">&quot;yes&quot;</span>).field(<span class="string">&quot;analyzer&quot;</span>,<span class="string">&quot;ik&quot;</span>).field(<span class="string">&quot;index&quot;</span>,<span class="string">&quot;analyzed&quot;</span>).endObject()</span><br><span class="line">                .startObject(<span class="string">&quot;price&quot;</span>).field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;long&quot;</span>).endObject()</span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject();</span><br><span class="line">        PutMappingRequest mapping = Requests.putMappingRequest(indices).type(mappingType).source(builder);</span><br><span class="line"></span><br><span class="line">        client.admin().indices().putMapping(mapping).actionGet();</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1:通过 setting对象来指定集群配置信息</span></span><br><span class="line"><span class="comment">         * //指定集群名称</span></span><br><span class="line"><span class="comment">         * //启动嗅探功能</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Settings settings = Settings.settingsBuilder()</span><br><span class="line">                .put(<span class="string">&quot;cluster.name&quot;</span>, clusterName)</span><br><span class="line">                .put(<span class="string">&quot;client.transport.sniff&quot;</span>, <span class="keyword">true</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 2：创建客户端</span></span><br><span class="line"><span class="comment">         * 通过setting来创建，若不指定则默认链接的集群名为elasticsearch</span></span><br><span class="line"><span class="comment">         * 链接使用tcp协议即9300</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client = TransportClient.builder().settings(settings).build()</span><br><span class="line">                    .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(HOST), PORT));</span><br><span class="line">            System.out.println(<span class="string">&quot;Elasticsearch connect info:&quot;</span> + client.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*transportClient = new TransportClient(setting);</span></span><br><span class="line"><span class="comment">        TransportAddress transportAddress = new InetSocketTransportAddress(&quot;192.168.79.131&quot;, 9300);</span></span><br><span class="line"><span class="comment">        transportClient.addTransportAddresses(transportAddress);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 3：查看集群信息</span></span><br><span class="line"><span class="comment">         * 注意我的集群结构是：</span></span><br><span class="line"><span class="comment">         *   131的elasticsearch.yml中指定为主节点不能存储数据，</span></span><br><span class="line"><span class="comment">         *   128的elasticsearch.yml中指定不为主节点只能存储数据。</span></span><br><span class="line"><span class="comment">         * 所有控制台只打印了192.168.79.128,只能获取数据节点</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/*ImmutableList&lt;DiscoveryNode&gt; connectedNodes = client.connectedNodes();</span></span><br><span class="line"><span class="comment">        for(DiscoveryNode node : connectedNodes)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(node.getHostAddress());</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试Elasticsearch客户端连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span>: test1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> sunt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2017年11月22日</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnknownHostException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        <span class="comment">//创建客户端</span></span><br><span class="line">        <span class="comment">/*TransportClient client = new PreBuiltTransportClient(Settings.EMPTY).addTransportAddresses(</span></span><br><span class="line"><span class="comment">                new InetSocketTransportAddress(InetAddress.getByName(HOST),PORT));*/</span></span><br><span class="line">        TransportClient client = TransportClient.builder().build().addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(HOST), PORT));</span><br><span class="line"></span><br><span class="line">        logger.debug(<span class="string">&quot;Elasticsearch connect info:&quot;</span> + client.toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;Elasticsearch connect info:&quot;</span> + client.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭客户端</span></span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String skuId = <span class="string">&quot;3724941&quot;</span>;</span><br><span class="line">        String skuName = <span class="string">&quot;华盛顿苹果礼盒 8个装（4个红蛇果+4个青苹果）单果重约145g-180g 新鲜水果礼盒&quot;</span>;</span><br><span class="line">        String skuPrice = <span class="string">&quot;4990&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取_id为1的类型</span></span><br><span class="line">        <span class="comment">/*GetResponse response1 = client.prepareGet(index, &quot;person&quot;, &quot;9&quot;).get();</span></span><br><span class="line"><span class="comment">        response1.getSourceAsMap();//获取值转换成map</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;查询一条数据:&quot; + JSON.toJSON(response1.getSourceAsMap()));*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取分词</span></span><br><span class="line">        List&lt;String&gt; listAnalysis = getIkAnalyzeSearchTerms(<span class="string">&quot;进口水果&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//List&lt;Map&lt;String, Object&gt;&gt; resultList6 = testMultiQueryStringQuery(index, type, &quot;name&quot;, listAnalysis);</span></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; resultList3 = testQueryStringQuery(index, type, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;进口水果&quot;</span>);</span><br><span class="line">        <span class="comment">//List&lt;Map&lt;String, Object&gt;&gt; resultList4 = getDataByWildcard(index, type, &quot;name&quot;, &quot;*水果*&quot;);</span></span><br><span class="line">        <span class="comment">//List&lt;Map&lt;String, Object&gt;&gt; resultList5 = getDataByMatch(index, type, &quot;name&quot;, &quot;进口 水果&quot;);</span></span><br><span class="line">        <span class="comment">//List&lt;Map&lt;String, Object&gt;&gt; resultList = getQueryDataBySingleField(index, type, &quot;name&quot;, &quot;进口水果&quot;);</span></span><br><span class="line">        <span class="comment">//List&lt;Map&lt;String, Object&gt;&gt; resultList2 = testSearchByPrefix(index, &quot;name&quot;, &quot;进口水果&quot;);</span></span><br><span class="line">        <span class="comment">//System.out.println();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增查</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String[] skuIds = &#123;<span class="string">&quot;2246904&quot;</span>, <span class="string">&quot;2138027&quot;</span>, <span class="string">&quot;3724941&quot;</span>, <span class="string">&quot;5664705&quot;</span>, <span class="string">&quot;3711635&quot;</span>&#125;;</span><br><span class="line">        String[] skuNames = &#123;<span class="string">&quot;果花 珍珠岩 无土栽培基质 颗粒状 保温性能好 园艺用品&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;进口华盛顿红蛇果 苹果4个装 单果重约180g 新鲜水果&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;华盛顿苹果礼盒 8个装（4个红蛇果+4个青苹果）单果重约145g-180g 新鲜水果礼盒&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;新疆阿克苏冰糖心 约5kg 单果200-250g（7Fresh 专供）&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;江西名牌 杨氏精品脐橙 5kg装 铂金果 水果橙子礼盒 2种包装随机发货&quot;</span>&#125;;</span><br><span class="line">        String[] skuPrices = &#123;<span class="string">&quot;500&quot;</span>, <span class="string">&quot;3800&quot;</span>, <span class="string">&quot;4990&quot;</span>, <span class="string">&quot;8500&quot;</span>, <span class="string">&quot;5880&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;skuIds.length; i++) &#123;</span><br><span class="line">            String skuId = skuIds[i];</span><br><span class="line">            String skuName = skuNames[i];</span><br><span class="line">            String skuPrice = skuPrices[i];</span><br><span class="line"></span><br><span class="line">            String jsonStr = <span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;\&quot;skuId\&quot;:\&quot;&quot;</span>+skuId+<span class="string">&quot;\&quot;,&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;\&quot;skuName\&quot;:\&quot;&quot;</span>+skuName+<span class="string">&quot;\&quot;,&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;\&quot;skuPrice\&quot;:\&quot;&quot;</span>+skuPrice+<span class="string">&quot;\&quot;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//参数说明： 索引，类型 ，_id；//setSource可以传以上map string  byte[] 几种方式</span></span><br><span class="line">            IndexResponse response = client.prepareIndex(index, type, skuId)</span><br><span class="line">                    .setSource(jsonStr,XContentType.JSON)</span><br><span class="line">                    .get();</span><br><span class="line">            <span class="keyword">boolean</span> created = response.isCreated();</span><br><span class="line">            System.out.println(<span class="string">&quot;创建一条记录:&quot;</span> + created);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取_id为1的类型</span></span><br><span class="line">            GetResponse response1 = client.prepareGet(index, type, skuId).get();</span><br><span class="line">            response1.getSourceAsMap();<span class="comment">//获取值转换成map</span></span><br><span class="line">            System.out.println(<span class="string">&quot;查询一条数据:&quot;</span> + JSON.toJSON(response1.getSourceAsMap()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删查</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String skuId = <span class="string">&quot;3724941&quot;</span>;</span><br><span class="line">        String skuName = <span class="string">&quot;华盛顿苹果礼盒 8个装（4个红蛇果+4个青苹果）单果重约145g-180g 新鲜水果礼盒&quot;</span>;</span><br><span class="line">        String skuPrice = <span class="string">&quot;4990&quot;</span>;</span><br><span class="line">        String skuImage = <span class="string">&quot;jfs/t16450/249/461724533/219792/7f204d7a/5a321ecbN4526f7d3.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除_id为1的类型</span></span><br><span class="line">        DeleteResponse response2 = client.prepareDelete(index, type, skuId).get();</span><br><span class="line">        System.out.println(<span class="string">&quot;删除一条数据：&quot;</span> + response2.isFound());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取_id为1的类型</span></span><br><span class="line">        GetResponse response1 = client.prepareGet(index, type, skuId).get();</span><br><span class="line">        response1.getSourceAsMap();<span class="comment">//获取值转换成map</span></span><br><span class="line">        System.out.println(<span class="string">&quot;查询一条数据:&quot;</span> + JSON.toJSON(response1.getSourceAsMap()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 改查</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String skuId = <span class="string">&quot;3724941&quot;</span>;</span><br><span class="line">        String skuName = <span class="string">&quot;华盛顿苹果礼盒 8个装（4个红蛇果+4个青苹果）单果重约145g-180g 新鲜水果礼盒&quot;</span>;</span><br><span class="line">        String skuPrice = <span class="string">&quot;4990&quot;</span>;</span><br><span class="line">        String skuName2 = <span class="string">&quot;华圣 陕西精品红富士苹果 12个装 果径75mm 约2.1kg 新鲜水果&quot;</span>;</span><br><span class="line">        <span class="comment">//更新</span></span><br><span class="line">        UpdateResponse updateResponse = client.prepareUpdate(index, type, skuId).setDoc(jsonBuilder()</span><br><span class="line">                .startObject()</span><br><span class="line">                .field(<span class="string">&quot;name&quot;</span>, skuName2)</span><br><span class="line">                .endObject())</span><br><span class="line">                .get();</span><br><span class="line">        System.out.println(<span class="string">&quot;更新一条数据:&quot;</span> + updateResponse.isCreated());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取_id为1的类型</span></span><br><span class="line">        GetResponse response1 = client.prepareGet(index, type, skuId).get();</span><br><span class="line">        response1.getSourceAsMap();<span class="comment">//获取值转换成map</span></span><br><span class="line">        System.out.println(<span class="string">&quot;查询一条数据:&quot;</span> + JSON.toJSON(response1.getSourceAsMap()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对象通过jackson.databind转换成byte[]</span></span><br><span class="line"><span class="comment">     * 注意一下date类型需要格式化处理  默认是 时间戳</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] convertByteArray(Object obj) &#123;</span><br><span class="line">        <span class="comment">// create once, reuse</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] json = mapper.writeValueAsBytes(obj);</span><br><span class="line">            <span class="keyword">return</span> json;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对象通过JSONtoString转换成JSON字符串</span></span><br><span class="line"><span class="comment">     * 使用fastjson 格式化注解  在属性上加入 <span class="doctag">@JSONField</span>(format=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">jsonStr</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*****************************/</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">            * 根据文档名、字段名、字段值查询某一条记录的详细信息；query查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type  文档名，相当于oracle中的表名，例如：ql_xz；</span></span><br><span class="line"><span class="comment">            * <span class="doctag">@param</span> key 字段名，例如：bdcqzh</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value  字段值，如：“”</span></span><br><span class="line"><span class="comment">            * <span class="doctag">@return</span>  List</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Lixin</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getQueryDataBySingleField</span><span class="params">(String index, String type, String key, String value)</span></span>&#123;</span><br><span class="line">        <span class="comment">//TransportClient client = getClient();</span></span><br><span class="line">        QueryBuilder qb = QueryBuilders.termQuery(key, value);</span><br><span class="line">        SearchResponse response = client.prepareSearch(index).setTypes(type)</span><br><span class="line">                .setQuery(qb)</span><br><span class="line">                .setFrom(<span class="number">0</span>).setSize(<span class="number">10000</span>).setExplain(<span class="keyword">true</span>)</span><br><span class="line">                .execute()</span><br><span class="line">                .actionGet();</span><br><span class="line">        <span class="keyword">return</span> responseToList(client,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多条件  文档名、字段名、字段值，查询某一条记录的详细信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 文档名，相当于oracle中的表名，例如：ql_xz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 字段名：字段值 的map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Lixin</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getBoolDataByMuchField</span><span class="params">(String index, String type, Map&lt;String,String&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="comment">//TransportClient client = getClient();</span></span><br><span class="line">        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">        <span class="keyword">for</span> (String in : map.keySet()) &#123;</span><br><span class="line">            <span class="comment">//map.keySet()返回的是所有key的值</span></span><br><span class="line">            String str = map.get(in);<span class="comment">//得到每个key多对用value的值</span></span><br><span class="line">            boolQueryBuilder.must(QueryBuilders.termQuery(in,str));</span><br><span class="line">        &#125;</span><br><span class="line">        SearchResponse response = client.prepareSearch(index).setTypes(type)</span><br><span class="line">                .setQuery(boolQueryBuilder)</span><br><span class="line">                .setFrom(<span class="number">0</span>).setSize(<span class="number">10000</span>).setExplain(<span class="keyword">true</span>)</span><br><span class="line">                .execute()</span><br><span class="line">                .actionGet();</span><br><span class="line">        <span class="keyword">return</span> responseToList(client,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单条件 通配符查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 文档名，相当于oracle中的表名，例如：ql_xz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 字段名，例如：bdcqzh</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 字段名模糊值：如 *123* ;?123*;?123?;*123?;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Lixin</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getDataByWildcard</span><span class="params">(String index, String type, String key, String value)</span></span>&#123;</span><br><span class="line">        <span class="comment">//TransportClient client = getClient();</span></span><br><span class="line">        WildcardQueryBuilder wBuilder = QueryBuilders.wildcardQuery(key, value);</span><br><span class="line">        SearchResponse response = client.prepareSearch(index).setTypes(type)</span><br><span class="line">                .setQuery(wBuilder)</span><br><span class="line">                .setFrom(<span class="number">0</span>).setSize(<span class="number">10000</span>).setExplain(<span class="keyword">true</span>)</span><br><span class="line">                .execute()</span><br><span class="line">                .actionGet();</span><br><span class="line">        <span class="keyword">return</span> responseToList(client,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多条件 通配符查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type  type 文档名，相当于oracle中的表名，例如：ql_xz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map   包含key:value 模糊值键值对</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Lixin</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getDataByMuchWildcard</span><span class="params">(String index, String type, Map&lt;String,String&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="comment">//TransportClient client = getClient();</span></span><br><span class="line">        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">        <span class="keyword">for</span> (String in : map.keySet()) &#123;</span><br><span class="line">            <span class="comment">//map.keySet()返回的是所有key的值</span></span><br><span class="line">            String str = map.get(in);<span class="comment">//得到每个key多对用value的值</span></span><br><span class="line">            boolQueryBuilder.must(QueryBuilders.wildcardQuery(in,str));</span><br><span class="line">        &#125;</span><br><span class="line">        SearchResponse response = client.prepareSearch(index).setTypes(type)</span><br><span class="line">                .setQuery(boolQueryBuilder)</span><br><span class="line">                .setFrom(<span class="number">0</span>).setSize(<span class="number">10000</span>).setExplain(<span class="keyword">true</span>)</span><br><span class="line">                .execute()</span><br><span class="line">                .actionGet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> responseToList(client,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单条件 模糊拆分查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 文档名，相当于oracle中的表名，例如：ql_xz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 字段名，例如：bdcqzh</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 字段名模糊值：如 *123* ;?123*;?123?;*123?;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Lixin</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getDataByMatch</span><span class="params">(String index, String type, String key, String value)</span></span>&#123;</span><br><span class="line">        <span class="comment">//TransportClient client = getClient();</span></span><br><span class="line">        MatchQueryBuilder mBuilder = QueryBuilders.matchQuery(key, value);</span><br><span class="line">        SearchResponse response = client.prepareSearch(index).setTypes(type)</span><br><span class="line">                .setQuery(mBuilder)</span><br><span class="line">                .setFrom(<span class="number">0</span>).setSize(<span class="number">10000</span>).setExplain(<span class="keyword">true</span>)</span><br><span class="line">                .execute()</span><br><span class="line">                .actionGet();</span><br><span class="line">        <span class="keyword">return</span> responseToList(client,response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单条件 中文分词模糊查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 文档名，相当于oracle中的表名，例如：ql_xz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 字段名，例如：bdcqzh</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 字段名模糊值：如 *123* ;?123*;?123?;*123?;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Lixin</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getDataByPrefix</span><span class="params">(String index, String type, String key, String value)</span></span>&#123;</span><br><span class="line">        <span class="comment">//TransportClient client = getClient();</span></span><br><span class="line">        PrefixQueryBuilder pBuilder = QueryBuilders.prefixQuery(key, value);</span><br><span class="line">        SearchResponse response = client.prepareSearch(index).setTypes(type)</span><br><span class="line">                .setQuery(pBuilder)</span><br><span class="line">                .setFrom(<span class="number">0</span>).setSize(<span class="number">10000</span>).setExplain(<span class="keyword">true</span>)</span><br><span class="line">                .execute()</span><br><span class="line">                .actionGet();</span><br><span class="line">        <span class="keyword">return</span> responseToList(client,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中文分词的操作</span></span><br><span class="line"><span class="comment">     * 1.查询以&quot;中&quot;开头的数据，有两条</span></span><br><span class="line"><span class="comment">     * 2.查询以“中国”开头的数据，有0条</span></span><br><span class="line"><span class="comment">     * 3.查询包含“烂”的数据，有1条</span></span><br><span class="line"><span class="comment">     * 4.查询包含“烂摊子”的数据，有0条</span></span><br><span class="line"><span class="comment">     * 分词：</span></span><br><span class="line"><span class="comment">     *      为什么我们搜索China is the greatest country~</span></span><br><span class="line"><span class="comment">     *                 中文：中国最牛逼</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *                 ×××</span></span><br><span class="line"><span class="comment">     *                      中华</span></span><br><span class="line"><span class="comment">     *                      人民</span></span><br><span class="line"><span class="comment">     *                      共和国</span></span><br><span class="line"><span class="comment">     *                      中华人民</span></span><br><span class="line"><span class="comment">     *                      人民共和国</span></span><br><span class="line"><span class="comment">     *                      华人</span></span><br><span class="line"><span class="comment">     *                      共和</span></span><br><span class="line"><span class="comment">     *      特殊的中文分词法：</span></span><br><span class="line"><span class="comment">     *          庖丁解牛</span></span><br><span class="line"><span class="comment">     *          IK分词法</span></span><br><span class="line"><span class="comment">     *          搜狗分词法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">testSearchByPrefix</span><span class="params">(String index, String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在prepareSearch()的参数为索引库列表，意为要从哪些索引库中进行查询</span></span><br><span class="line">        SearchResponse response = client.prepareSearch(index)</span><br><span class="line">                .setSearchType(SearchType.DEFAULT)  <span class="comment">// 设置查询类型，有QUERY_AND_FETCH  QUERY_THEN_FETCH  DFS_QUERY_AND_FETCH  DFS_QUERY_THEN_FETCH</span></span><br><span class="line">                <span class="comment">//.setSearchType(SearchType.DEFAULT)  // 设置查询类型，有QUERY_AND_FETCH  QUERY_THEN_FETCH  DFS_QUERY_AND_FETCH  DFS_QUERY_THEN_FETCH</span></span><br><span class="line">                <span class="comment">//.setQuery(QueryBuilders.prefixQuery(&quot;content&quot;, &quot;烂摊子&quot;))// 设置相应的query，用于检索，termQuery的参数说明：name是doc中的具体的field，value就是要找的具体的值</span></span><br><span class="line"><span class="comment">//                .setQuery(QueryBuilders.regexpQuery(&quot;content&quot;, &quot;.*烂摊子.*&quot;))</span></span><br><span class="line">                .setQuery(QueryBuilders.prefixQuery(key, value))</span><br><span class="line">                .get();</span><br><span class="line">        <span class="keyword">return</span> responseToList(client,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">testFuzzyQuery</span><span class="params">(String index, String type, String key, String value)</span></span>&#123;</span><br><span class="line">        <span class="comment">//TransportClient client = getClient();</span></span><br><span class="line">        FuzzyQueryBuilder fBuilder = QueryBuilders.fuzzyQuery(key, value);</span><br><span class="line">        SearchResponse response = client.prepareSearch(index).setTypes(type)</span><br><span class="line">                .setQuery(fBuilder)</span><br><span class="line">                .setFrom(<span class="number">0</span>).setSize(<span class="number">10000</span>).setExplain(<span class="keyword">true</span>)</span><br><span class="line">                .execute()</span><br><span class="line">                .actionGet();</span><br><span class="line">        <span class="keyword">return</span> responseToList(client,response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">testQueryStringQuery</span><span class="params">(String index, String type, String key, String value)</span></span>&#123;</span><br><span class="line">        <span class="comment">//TransportClient client = getClient();</span></span><br><span class="line">        QueryBuilder fBuilder = QueryBuilders.queryStringQuery(value).field(key);</span><br><span class="line">        SearchResponse response = client.prepareSearch(index).setTypes(type)</span><br><span class="line">                .setQuery(fBuilder)</span><br><span class="line">                .setFrom(<span class="number">0</span>).setSize(<span class="number">10000</span>).setExplain(<span class="keyword">true</span>)</span><br><span class="line">                .execute()</span><br><span class="line">                .actionGet();</span><br><span class="line">        <span class="keyword">return</span> responseToList(client,response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">testMultiQueryStringQuery</span><span class="params">(String index, String type, String key, List&lt;String&gt; listAnalysis)</span></span>&#123;</span><br><span class="line">        <span class="comment">//TransportClient client = getClient();</span></span><br><span class="line">        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">        <span class="keyword">for</span> (String term : listAnalysis) &#123;</span><br><span class="line">            boolQueryBuilder.should(QueryBuilders.queryStringQuery(term).field(key));</span><br><span class="line">            <span class="comment">//这里可以用must 或者 should 视情况而定</span></span><br><span class="line">        &#125;</span><br><span class="line">        SearchResponse response = client.prepareSearch(index).setTypes(type)</span><br><span class="line">                .setQuery(boolQueryBuilder)</span><br><span class="line">                .setFrom(<span class="number">0</span>).setSize(<span class="number">10000</span>).setExplain(<span class="keyword">true</span>)</span><br><span class="line">                .execute()</span><br><span class="line">                .actionGet();</span><br><span class="line">        <span class="keyword">return</span> responseToList(client,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将查询后获得的response转成list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">responseToList</span><span class="params">(Client client, SearchResponse response)</span></span>&#123;</span><br><span class="line">        SearchHits hits = response.getHits();</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Map&lt;String,Object&gt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hits.getHits().length; i++) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; map = hits.getAt(i).getSource();</span><br><span class="line">            System.out.println(map.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            list.add(map);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//client.close();</span></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用 ES 获取 IK 分词后结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchContent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getIkAnalyzeSearchTerms</span><span class="params">(String searchContent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用 IK 分词分词</span></span><br><span class="line">        AnalyzeRequestBuilder ikRequest = <span class="keyword">new</span> AnalyzeRequestBuilder(client,</span><br><span class="line">                AnalyzeAction.INSTANCE, index, searchContent);</span><br><span class="line">        <span class="comment">//ikRequest.setAnalyzer(&quot;ik&quot;);</span></span><br><span class="line">        ikRequest.setTokenizer(<span class="string">&quot;ik&quot;</span>);</span><br><span class="line">        List&lt;AnalyzeResponse.AnalyzeToken&gt; ikTokenList = ikRequest.execute().actionGet().getTokens();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环赋值</span></span><br><span class="line">        List&lt;String&gt; searchTermList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//ikTokenList.forEach(ikToken -&gt; &#123; searchTermList.add(ikToken.getTerm()); &#125;);</span></span><br><span class="line">        <span class="keyword">for</span> (AnalyzeResponse.AnalyzeToken ikToken: ikTokenList) &#123;</span><br><span class="line">            System.out.println(ikToken.getTerm());</span><br><span class="line">            searchTermList.add(ikToken.getTerm());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> searchTermList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 然后就是创建两个查询过程了 ，下面是from-size分页的执行代码：</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFromSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;from size 模式启动！&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> count = client.prepareCount(index).setTypes(type).execute()</span><br><span class="line">                .actionGet().getCount();</span><br><span class="line">        <span class="comment">//QueryBuilder qBuilder = QueryBuilders.queryStringQuery(value).field(key);</span></span><br><span class="line">        SearchRequestBuilder requestBuilder = client.prepareSearch(index).setTypes(type)</span><br><span class="line">                .setQuery(QueryBuilders.queryStringQuery(<span class="string">&quot;进口水果&quot;</span>).field(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,sum=<span class="number">0</span>; sum&lt;count; i++) &#123;</span><br><span class="line">            SearchResponse response = requestBuilder.setFrom(i).setSize(<span class="number">3</span>).execute().actionGet();</span><br><span class="line">            sum += response.getHits().hits().length;</span><br><span class="line">            responseToList(client,response);</span><br><span class="line">            System.out.println(<span class="string">&quot;总量&quot;</span>+count+<span class="string">&quot;, 已经查到&quot;</span>+sum);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;elapsed&lt;&quot;</span>+(System.currentTimeMillis()-begin)+<span class="string">&quot;&gt;ms.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下面是scroll分页的执行代码，注意啊！scroll里面的size是相对于每个分片来说的，</span></span><br><span class="line"><span class="comment">     * 所以实际返回的数量是：分片的数量*size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testScroll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//String index, String type,String key,String value</span></span><br><span class="line">        System.out.println(<span class="string">&quot;scroll 模式启动！&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//QueryBuilder qBuilder = QueryBuilders.queryStringQuery(value).field(key);</span></span><br><span class="line">        <span class="comment">//获取Client对象,设置索引名称,搜索类型(SearchType.SCAN),搜索数量,发送请求</span></span><br><span class="line">        SearchResponse scrollResponse = client.prepareSearch(index)</span><br><span class="line">                .setTypes(type)</span><br><span class="line">                .setQuery(QueryBuilders.queryStringQuery(<span class="string">&quot;进口水果&quot;</span>).field(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">                .setSearchType(SearchType.SCAN).setSize(<span class="number">3</span>).setScroll(TimeValue.timeValueMinutes(<span class="number">1</span>))</span><br><span class="line">                .execute().actionGet();</span><br><span class="line">        <span class="comment">//注意:首次搜索并不包含数据，第一次不返回数据，获取总数量</span></span><br><span class="line">        <span class="keyword">long</span> count = scrollResponse.getHits().getTotalHits();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,sum=<span class="number">0</span>; sum&lt;count; i++) &#123;</span><br><span class="line">            scrollResponse = client.prepareSearchScroll(scrollResponse.getScrollId())</span><br><span class="line">                    .setScroll(TimeValue.timeValueMinutes(<span class="number">8</span>)).execute().actionGet();</span><br><span class="line">            sum += scrollResponse.getHits().hits().length;</span><br><span class="line">            responseToList(client,scrollResponse);</span><br><span class="line">            System.out.println(<span class="string">&quot;总量&quot;</span>+count+<span class="string">&quot;, 已经查到&quot;</span>+sum);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;elapsed&lt;&quot;</span>+(System.currentTimeMillis()-begin)+<span class="string">&quot;&gt;ms.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-分页代码"><a href="#3-分页代码" class="headerlink" title="3. 分页代码"></a>3. 分页代码</h2><p>创建TestController类，在上述测试都无问题之后，再进行下面的分页操作。</p><p>TestController.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequestBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchScrollRequestBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.analyze.AnalyzeAction;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.analyze.AnalyzeRequestBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.analyze.AnalyzeResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchType;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.Client;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.unit.TimeValue;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.BoolQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类功能描述:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/2/22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String HOST = <span class="string">&quot;10.10.13.234&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** http请求的端口是9200，客户端是9300 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> PORT = <span class="number">9300</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 索引库名 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String index = <span class="string">&quot;my_index&quot;</span>;</span><br><span class="line">    <span class="comment">/** 类型名称 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String type = <span class="string">&quot;skuId&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String clusterName = <span class="string">&quot;my-application&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String template = <span class="string">&quot;Hello, %s!&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicLong counter = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/greeting&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Greeting <span class="title">greeting</span><span class="params">(<span class="meta">@RequestParam(value=&quot;name&quot;, defaultValue=&quot;World&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Greeting(counter.incrementAndGet(),</span><br><span class="line">                String.format(template, name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTotalRows</span><span class="params">(String keyword, TransportClient client)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> totalRows;</span><br><span class="line">        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">        boolQueryBuilder.must(QueryBuilders.termQuery(<span class="string">&quot;isShow&quot;</span>, <span class="number">1</span>))</span><br><span class="line">                .must(QueryBuilders.termQuery(<span class="string">&quot;status&quot;</span>, <span class="number">1</span>))</span><br><span class="line">                .must(QueryBuilders.termQuery(<span class="string">&quot;deleteStatus&quot;</span>, <span class="number">1</span>))</span><br><span class="line">                .must(QueryBuilders.termQuery(<span class="string">&quot;salesStatus&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (keyword == <span class="keyword">null</span> || keyword.isEmpty()) &#123;</span><br><span class="line">            totalRows = client.prepareCount(index).setTypes(type)</span><br><span class="line">                    .execute()</span><br><span class="line">                    .actionGet().getCount();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            QueryBuilder fBuilder = QueryBuilders.queryStringQuery(keyword).field(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            boolQueryBuilder.must(fBuilder);</span><br><span class="line">            totalRows = client.prepareCount(index).setTypes(type)</span><br><span class="line">                    .setQuery(boolQueryBuilder)</span><br><span class="line">                    .execute()</span><br><span class="line">                    .actionGet().getCount();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> totalRows;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/searchFromSize&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">testSearchByFromSize</span><span class="params">(<span class="meta">@RequestParam(required = false)</span> Integer pageIndex, <span class="meta">@RequestParam(required = false)</span> Integer pageSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                               <span class="meta">@RequestParam(required = false)</span> String keyword, <span class="meta">@RequestParam(required = false)</span> String priceSort)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;op&lt;testSearchByFromSize&gt; pageIndex&lt;&quot;</span>+pageIndex+<span class="string">&quot;&gt; pageSize&lt;&quot;</span>+pageSize+<span class="string">&quot;&gt; &quot;</span> +</span><br><span class="line">                <span class="string">&quot;keyword&lt;&quot;</span>+keyword+<span class="string">&quot;&gt; priceSort&lt;&quot;</span>+priceSort+<span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">        JSONObject result = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        JSONObject goodsResult = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        TransportClient client = getClient();</span><br><span class="line">        <span class="keyword">long</span> totalRows = getTotalRows(keyword, client);</span><br><span class="line">        getIkAnalyzeSearchTerms(client, keyword);</span><br><span class="line">        <span class="keyword">int</span> from = (pageIndex - <span class="number">1</span>) * pageSize;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; goodsExportList = testQueryStringQueryFromSize(client, index, type, <span class="string">&quot;name&quot;</span>,</span><br><span class="line">                keyword, from, pageSize, priceSort);</span><br><span class="line">        goodsResult.put( <span class="string">&quot;goods&quot;</span>, goodsExportList );</span><br><span class="line">        goodsResult.put( <span class="string">&quot;pageIndex&quot;</span>, pageIndex );</span><br><span class="line">        goodsResult.put( <span class="string">&quot;pageSize&quot;</span>, pageSize );</span><br><span class="line">        goodsResult.put( <span class="string">&quot;totalRows&quot;</span>, totalRows );</span><br><span class="line"></span><br><span class="line">        result.put( <span class="string">&quot;success&quot;</span>, <span class="keyword">true</span> );</span><br><span class="line">        result.put( <span class="string">&quot;resultMessage&quot;</span>, <span class="string">&quot;&quot;</span> );</span><br><span class="line">        result.put( <span class="string">&quot;resultCode&quot;</span>, <span class="string">&quot;0000&quot;</span> );</span><br><span class="line">        result.put( <span class="string">&quot;result&quot;</span>, goodsResult );</span><br><span class="line">        System.out.println(<span class="string">&quot;---op&lt;searchFromSize&gt; elapsed&lt;&quot;</span>+(System.currentTimeMillis()-begin)+<span class="string">&quot;&gt;ms&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String scrollIdTemp = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/searchScroll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">testSearchByScroll</span><span class="params">(<span class="meta">@RequestParam(required = false)</span> String scrollId, <span class="meta">@RequestParam(required = false)</span> Integer pageSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                               <span class="meta">@RequestParam(required = false)</span> String keyword, <span class="meta">@RequestParam(required = false)</span> String priceSort)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;op&lt;testSearchByScroll&gt; scrollId&lt;&quot;</span>+scrollId+<span class="string">&quot;&gt; pageSize&lt;&quot;</span>+pageSize+<span class="string">&quot;&gt; &quot;</span> +</span><br><span class="line">                <span class="string">&quot;keyword&lt;&quot;</span>+keyword+<span class="string">&quot;&gt; priceSort&lt;&quot;</span>+priceSort+<span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">        JSONObject result = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        JSONObject goodsResult = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        scrollIdTemp = scrollId;</span><br><span class="line">        TransportClient client = getClient();</span><br><span class="line">        <span class="keyword">long</span> totalRows = getTotalRows(keyword, client);</span><br><span class="line">        getIkAnalyzeSearchTerms(client, keyword);</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; goodsExportList = testQueryStringQueryScroll(client, index, type, <span class="string">&quot;name&quot;</span>,</span><br><span class="line">                keyword, scrollIdTemp, pageSize, priceSort);</span><br><span class="line">        client.close();</span><br><span class="line"></span><br><span class="line">        goodsResult.put( <span class="string">&quot;goods&quot;</span>, goodsExportList );</span><br><span class="line">        goodsResult.put( <span class="string">&quot;scrollId&quot;</span>, scrollIdTemp );</span><br><span class="line">        goodsResult.put( <span class="string">&quot;pageSize&quot;</span>, pageSize );</span><br><span class="line">        goodsResult.put( <span class="string">&quot;totalRows&quot;</span>, totalRows );</span><br><span class="line"></span><br><span class="line">        result.put( <span class="string">&quot;success&quot;</span>, <span class="keyword">true</span> );</span><br><span class="line">        result.put( <span class="string">&quot;resultMessage&quot;</span>, <span class="string">&quot;&quot;</span> );</span><br><span class="line">        result.put( <span class="string">&quot;resultCode&quot;</span>, <span class="string">&quot;0000&quot;</span> );</span><br><span class="line">        result.put( <span class="string">&quot;result&quot;</span>, goodsResult );</span><br><span class="line">        System.out.println(<span class="string">&quot;---op&lt;searchScroll&gt; elapsed&lt;&quot;</span>+(System.currentTimeMillis()-begin)+<span class="string">&quot;&gt;ms&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 然后就是创建两个查询过程了 ，下面是from-size分页的执行代码：</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">testQueryStringQueryFromSize</span><span class="params">(TransportClient client, String index, String type, String key,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     String value, Integer pageIndex, Integer pageSize ,String priceSort)</span></span>&#123;</span><br><span class="line">        SearchResponse response = <span class="keyword">null</span>;</span><br><span class="line">        List resultList = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//TransportClient client = getClient();</span></span><br><span class="line">            BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span> || value.isEmpty()) &#123;</span><br><span class="line">                boolQueryBuilder.must(QueryBuilders.termQuery(<span class="string">&quot;isShow&quot;</span>, <span class="number">1</span>))</span><br><span class="line">                        .must(QueryBuilders.termQuery(<span class="string">&quot;status&quot;</span>, <span class="number">1</span>))</span><br><span class="line">                        .must(QueryBuilders.termQuery(<span class="string">&quot;deleteStatus&quot;</span>, <span class="number">1</span>))</span><br><span class="line">                        .must(QueryBuilders.termQuery(<span class="string">&quot;salesStatus&quot;</span>, <span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                QueryBuilder fBuilder = QueryBuilders.queryStringQuery(value).field(key);</span><br><span class="line">                boolQueryBuilder.must(QueryBuilders.termQuery(<span class="string">&quot;isShow&quot;</span>, <span class="number">1</span>))</span><br><span class="line">                        .must(QueryBuilders.termQuery(<span class="string">&quot;status&quot;</span>, <span class="number">1</span>))</span><br><span class="line">                        .must(QueryBuilders.termQuery(<span class="string">&quot;deleteStatus&quot;</span>, <span class="number">1</span>))</span><br><span class="line">                        .must(QueryBuilders.termQuery(<span class="string">&quot;salesStatus&quot;</span>, <span class="number">1</span>))</span><br><span class="line">                        .must(fBuilder);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (priceSort == <span class="keyword">null</span> || priceSort.isEmpty()) &#123;</span><br><span class="line">                response = client.prepareSearch(index).setTypes(type)</span><br><span class="line">                        .setQuery(boolQueryBuilder)</span><br><span class="line">                        .setFrom(pageIndex).setSize(pageSize).setExplain(<span class="keyword">true</span>)</span><br><span class="line">                        .execute()</span><br><span class="line">                        .actionGet();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ((<span class="string">&quot;desc&quot;</span>).equals(priceSort)) &#123;</span><br><span class="line">                    response = client.prepareSearch(index).setTypes(type)</span><br><span class="line">                            .setQuery(boolQueryBuilder)</span><br><span class="line">                            .setFrom(pageIndex).setSize(pageSize).setExplain(<span class="keyword">true</span>)</span><br><span class="line">                            .addSort(<span class="string">&quot;price&quot;</span>, SortOrder.DESC)</span><br><span class="line">                            .execute()</span><br><span class="line">                            .actionGet();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    response = client.prepareSearch(index).setTypes(type)</span><br><span class="line">                            .setQuery(boolQueryBuilder)</span><br><span class="line">                            .setFrom(pageIndex).setSize(pageSize).setExplain(<span class="keyword">true</span>)</span><br><span class="line">                            .addSort(<span class="string">&quot;price&quot;</span>, SortOrder.ASC)</span><br><span class="line">                            .execute()</span><br><span class="line">                            .actionGet();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            resultList = responseToList(response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下面是scroll分页的执行代码，注意啊！scroll里面的size是相对于每个分片来说的，</span></span><br><span class="line"><span class="comment">     * 所以实际返回的数量是：分片的数量*size</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Scroll-Scan 方式与普通 scroll 有几点不同：</span></span><br><span class="line"><span class="comment">     * 1.Scroll-Scan 结果没有排序，按 index 顺序返回，没有排序，可以提高取数据性能。</span></span><br><span class="line"><span class="comment">     * 2.初始化时只返回 _scroll_id，没有具体的 hits 结果。</span></span><br><span class="line"><span class="comment">     * 3.size 控制的是每个分片的返回的数据量而不是整个请求返回的数据量。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">testQueryStringQueryScroll</span><span class="params">(TransportClient client, String index, String type, String key,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     String value, String scrollId, Integer pageSize ,String priceSort)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pageSize != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//默认有5个分片，</span></span><br><span class="line">            pageSize = pageSize/<span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SearchResponse scrollResponse = <span class="keyword">null</span>;</span><br><span class="line">        List resultList = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//TransportClient client = getClient();</span></span><br><span class="line">            BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span> || value.isEmpty()) &#123;</span><br><span class="line">                boolQueryBuilder.must(QueryBuilders.termQuery(<span class="string">&quot;isShow&quot;</span>, <span class="number">1</span>))</span><br><span class="line">                        .must(QueryBuilders.termQuery(<span class="string">&quot;status&quot;</span>, <span class="number">1</span>))</span><br><span class="line">                        .must(QueryBuilders.termQuery(<span class="string">&quot;deleteStatus&quot;</span>, <span class="number">1</span>))</span><br><span class="line">                        .must(QueryBuilders.termQuery(<span class="string">&quot;salesStatus&quot;</span>, <span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                QueryBuilder fBuilder = QueryBuilders.queryStringQuery(value).field(key);</span><br><span class="line">                boolQueryBuilder.must(QueryBuilders.termQuery(<span class="string">&quot;isShow&quot;</span>, <span class="number">1</span>))</span><br><span class="line">                        .must(QueryBuilders.termQuery(<span class="string">&quot;status&quot;</span>, <span class="number">1</span>))</span><br><span class="line">                        .must(QueryBuilders.termQuery(<span class="string">&quot;deleteStatus&quot;</span>, <span class="number">1</span>))</span><br><span class="line">                        .must(QueryBuilders.termQuery(<span class="string">&quot;salesStatus&quot;</span>, <span class="number">1</span>))</span><br><span class="line">                        .must(fBuilder);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (scrollId == <span class="keyword">null</span> || scrollId.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (priceSort == <span class="keyword">null</span> || priceSort.isEmpty()) &#123;</span><br><span class="line">                    scrollResponse = client.prepareSearch(index).setTypes(type)</span><br><span class="line">                            .setQuery(boolQueryBuilder)</span><br><span class="line">                            .setSearchType(SearchType.SCAN).setSize(pageSize).setScroll(TimeValue.timeValueMinutes(<span class="number">5</span>))</span><br><span class="line">                            .execute()</span><br><span class="line">                            .actionGet();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="string">&quot;desc&quot;</span>).equals(priceSort)) &#123;</span><br><span class="line">                        scrollResponse = client.prepareSearch(index).setTypes(type)</span><br><span class="line">                                .setQuery(boolQueryBuilder)</span><br><span class="line">                                .setSearchType(SearchType.SCAN).setSize(pageSize).setScroll(TimeValue.timeValueMinutes(<span class="number">5</span>))</span><br><span class="line">                                .addSort(<span class="string">&quot;price&quot;</span>, SortOrder.DESC)</span><br><span class="line">                                .execute()</span><br><span class="line">                                .actionGet();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        scrollResponse = client.prepareSearch(index).setTypes(type)</span><br><span class="line">                                .setQuery(boolQueryBuilder)</span><br><span class="line">                                .setSearchType(SearchType.SCAN).setSize(pageSize).setScroll(TimeValue.timeValueMinutes(<span class="number">5</span>))</span><br><span class="line">                                .addSort(<span class="string">&quot;price&quot;</span>, SortOrder.ASC)</span><br><span class="line">                                .execute()</span><br><span class="line">                                .actionGet();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//注意:首次搜索并不包含数据，第一次不返回数据，所以先查一次获取scrollId，在进行第二次scroll查询</span></span><br><span class="line">                scrollId = scrollResponse.getScrollId();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            scrollResponse = client.prepareSearchScroll(scrollId)</span><br><span class="line">                    .setScroll(TimeValue.timeValueMinutes(<span class="number">5</span>))</span><br><span class="line">                    .execute()</span><br><span class="line">                    .actionGet();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//注意:首次搜索并不包含数据，第一次不返回数据，获取总数量</span></span><br><span class="line">            <span class="keyword">long</span> count = scrollResponse.getHits().getTotalHits();</span><br><span class="line">            System.out.println(<span class="string">&quot;scrollResponse.getHits().getHits().length:&quot;</span>+scrollResponse.getHits().hits().length);</span><br><span class="line">            System.out.println(<span class="string">&quot;scroll count:&quot;</span>+count);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取本次查询的scrollId</span></span><br><span class="line">            scrollIdTemp = scrollResponse.getScrollId();</span><br><span class="line">            System.out.println(<span class="string">&quot;--------- searchByScroll scrollID:&quot;</span>+scrollIdTemp);</span><br><span class="line">            logger.info(<span class="string">&quot;--------- searchByScroll scrollID &#123;&#125;&quot;</span>, scrollIdTemp);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 搜索结果</span></span><br><span class="line">            SearchHit[] searchHits = scrollResponse.getHits().hits();</span><br><span class="line">            <span class="keyword">for</span> (SearchHit searchHit : searchHits) &#123;</span><br><span class="line">                String source = searchHit.getSource().toString();</span><br><span class="line">                logger.info(<span class="string">&quot;--------- searchByScroll source &#123;&#125;&quot;</span>, source);</span><br><span class="line">            &#125;</span><br><span class="line">            resultList = responseToList(scrollResponse);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将查询后获得的response转成list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">responseToList</span><span class="params">(SearchResponse response)</span></span>&#123;</span><br><span class="line">        SearchHits hits = response.getHits();</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;hits.hits().length:&quot;</span>+hits.hits().length);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hits.hits().length; i++) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; map = hits.getAt(i).getSource();</span><br><span class="line">            Map&lt;String, Object&gt; resultMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">            System.out.println(map.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            resultMap.put(<span class="string">&quot;skuId&quot;</span>, map.get(<span class="string">&quot;skuId&quot;</span>));</span><br><span class="line">            resultMap.put(<span class="string">&quot;name&quot;</span>, map.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            resultMap.put(<span class="string">&quot;image&quot;</span>, map.get(<span class="string">&quot;primaryImage&quot;</span>));</span><br><span class="line">            resultMap.put(<span class="string">&quot;price&quot;</span>, map.get(<span class="string">&quot;luckyPrice&quot;</span>));</span><br><span class="line">            list.add(resultMap);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TransportClient <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1:通过 setting对象来指定集群配置信息</span></span><br><span class="line"><span class="comment">         * //指定集群名称</span></span><br><span class="line"><span class="comment">         * //启动嗅探功能</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Settings settings = Settings.settingsBuilder()</span><br><span class="line">                .put(<span class="string">&quot;cluster.name&quot;</span>, clusterName)</span><br><span class="line">                .put(<span class="string">&quot;client.transport.sniff&quot;</span>, <span class="keyword">true</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 2：创建客户端</span></span><br><span class="line"><span class="comment">         * 通过setting来创建，若不指定则默认链接的集群名为elasticsearch</span></span><br><span class="line"><span class="comment">         * 链接使用tcp协议即9300</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        TransportClient client = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client = TransportClient.builder().settings(settings).build()</span><br><span class="line">                    .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(HOST), PORT));</span><br><span class="line">            System.out.println(<span class="string">&quot;Elasticsearch connect info:&quot;</span> + client.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*transportClient = new TransportClient(setting);</span></span><br><span class="line"><span class="comment">        TransportAddress transportAddress = new InetSocketTransportAddress(&quot;192.168.79.131&quot;, 9300);</span></span><br><span class="line"><span class="comment">        transportClient.addTransportAddresses(transportAddress);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 3：查看集群信息</span></span><br><span class="line"><span class="comment">         * 注意我的集群结构是：</span></span><br><span class="line"><span class="comment">         *   131的elasticsearch.yml中指定为主节点不能存储数据，</span></span><br><span class="line"><span class="comment">         *   128的elasticsearch.yml中指定不为主节点只能存储数据。</span></span><br><span class="line"><span class="comment">         * 所有控制台只打印了192.168.79.128,只能获取数据节点</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/*ImmutableList&lt;DiscoveryNode&gt; connectedNodes = client.connectedNodes();</span></span><br><span class="line"><span class="comment">        for(DiscoveryNode node : connectedNodes)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(node.getHostAddress());</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用 ES 获取 IK 分词后结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchContent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getIkAnalyzeSearchTerms</span><span class="params">(Client client, String searchContent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用 IK 分词分词</span></span><br><span class="line">        AnalyzeRequestBuilder ikRequest = <span class="keyword">new</span> AnalyzeRequestBuilder(client,</span><br><span class="line">                AnalyzeAction.INSTANCE, index, searchContent);</span><br><span class="line">        <span class="comment">//ikRequest.setAnalyzer(&quot;ik&quot;);</span></span><br><span class="line">        ikRequest.setTokenizer(<span class="string">&quot;ik&quot;</span>);</span><br><span class="line">        List&lt;AnalyzeResponse.AnalyzeToken&gt; ikTokenList = ikRequest.execute().actionGet().getTokens();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环赋值</span></span><br><span class="line">        List&lt;String&gt; searchTermList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//ikTokenList.forEach(ikToken -&gt; &#123; searchTermList.add(ikToken.getTerm()); &#125;);</span></span><br><span class="line">        <span class="keyword">for</span> (AnalyzeResponse.AnalyzeToken ikToken: ikTokenList) &#123;</span><br><span class="line">            System.out.println(ikToken.getTerm());</span><br><span class="line">            searchTermList.add(ikToken.getTerm());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> searchTermList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-前端数据"><a href="#4-前端数据" class="headerlink" title="4. 前端数据"></a>4. 前端数据</h2><p>为上述的分页的数据可视化，加入前端展示页，可按中文关键词搜索分页等操作。</p><p>index.html，以及js操作部分，data.js，由于篇幅问题，下载可移步至github:</p><p><a href="https://github.com/wonderomg/elasticsearch-visual%E4%B8%8B%E8%BD%BD%E8%AF%A6%E7%BB%86%E5%86%85%E5%AE%B9%EF%BC%8C">https://github.com/wonderomg/elasticsearch-visual下载详细内容，</a></p><p>前后端页编写完之后，启动springboot工程，访问<code>http://localhost:8080/</code>该工程端口。</p><p>可以看到操作 页面，类似下图：</p><p><img src="https://raw.githubusercontent.com/wonderomg/elasticsearch-visual/master/search.png" alt="search"></p><p>from size和scroll都可通过该页面进行测试。</p><h2 id="5-数据限制问题"><a href="#5-数据限制问题" class="headerlink" title="5. 数据限制问题"></a>5. 数据限制问题</h2><p>测试from size时发现一个问题，当数据超过10000条会报错，提示如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Caused by: QueryPhaseExecutionException[Result window is too large, </span><br><span class="line">from + size must be less than or equal to: [10000] but was [10001]. </span><br><span class="line">See the scroll api for a more efficient way to request large data sets. </span><br><span class="line">This limit can be set by changing the [index.max_result_window] index level parameter.]</span><br></pre></td></tr></table></figure><p>原因是es索引被限制了可查前10000条数据，参数是<code>max_result_window</code>，需要我们手动修改这个限制。</p><p>(1)查询index.max_result_window</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET &quot;10.10.13.234:9200/jd_mall_v2/_settings?preserve_existing=true&quot;</span><br></pre></td></tr></table></figure><p>(2)更改index.max_result_window</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT &quot;10.10.13.234:9200/jd_mall_v2/_settings?preserve_existing=true&quot; -d &#x27;&#123; &quot;index&quot; : &#123; &quot;max_result_window&quot; : 100000000&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure><p>设置max_result_window的时候需要先关闭索引，不然会报错<code>Can&#39;t update non dynamic settings[[index.preserve_existing]] for open indices</code>的错误，可以通过指令关闭，也可以通过head可视化界面关闭和开启，也可以通过上述步骤1.7和1.8的api关闭和开启。</p><h2 id="6-排序"><a href="#6-排序" class="headerlink" title="6. 排序"></a>6. 排序</h2><p>分页的时候我们可以还有排序的场景，java api的话增加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchRequestBuilder.addSort(<span class="string">&quot;publish_time&quot;</span>, SortOrder.DESC);</span><br></pre></td></tr></table></figure><p>按照某个字段排序的话，hit.getScore()将会失效<br>如果是scroll分页无法进行排序。</p>]]></content:encoded>
      
      
      <category domain="https://wonderomg.github.io/categories/elasticsearch/">elasticsearch</category>
      
      
      <category domain="https://wonderomg.github.io/tags/elasticsearch/">elasticsearch</category>
      
      <category domain="https://wonderomg.github.io/tags/ik%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/">ik中文分词</category>
      
      <category domain="https://wonderomg.github.io/tags/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/">分页查询</category>
      
      
      <comments>https://wonderomg.github.io/2018/05/17/Elasticsearch%E5%AE%9E%E8%B7%B5api%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Elasticsearch实践(2)-索引及索引别名alias</title>
      <link>https://wonderomg.github.io/2018/05/16/Elasticsearch%E5%AE%9E%E8%B7%B5%E7%B4%A2%E5%BC%95%E5%8F%8A%E7%B4%A2%E5%BC%95%E5%88%AB%E5%90%8Dalias/</link>
      <guid>https://wonderomg.github.io/2018/05/16/Elasticsearch%E5%AE%9E%E8%B7%B5%E7%B4%A2%E5%BC%95%E5%8F%8A%E7%B4%A2%E5%BC%95%E5%88%AB%E5%90%8Dalias/</guid>
      <pubDate>Tue, 15 May 2018 16:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;我们都知道es效率如此高主要和索引是分不开的，需要将每一条数据建立索引，创建索引时数据字段也是你插入时的样子，索引中包含了数据的属性字段。而且创建索引也比较耗时（当然了，肯定比插入关系型数据库中更快😁），但是毕竟每一条数据都要建一次，数据量到达千万级亿级时，时间不是很乐观。🤔&lt;/p&gt;
&lt;p&gt;💡想像这样一个场景，产品上线一段时间后，由于产品需要，要将某个字段类型改变，比如需要将某个long型字段改成string类型，直接改会类型报错，查阅官方文档可知，es是不支持索引的更新操作的，需要对所有已有数据的所有field进行reindex，这意味着，需要停止服务进行重建索引操作，停服是最不想看到😭，这时如果你当初建了索引别名，你会感谢你当初使用别名的决定，为何要用别名alias？🤷&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>我们都知道es效率如此高主要和索引是分不开的，需要将每一条数据建立索引，创建索引时数据字段也是你插入时的样子，索引中包含了数据的属性字段。而且创建索引也比较耗时（当然了，肯定比插入关系型数据库中更快😁），但是毕竟每一条数据都要建一次，数据量到达千万级亿级时，时间不是很乐观。🤔</p><p>💡想像这样一个场景，产品上线一段时间后，由于产品需要，要将某个字段类型改变，比如需要将某个long型字段改成string类型，直接改会类型报错，查阅官方文档可知，es是不支持索引的更新操作的，需要对所有已有数据的所有field进行reindex，这意味着，需要停止服务进行重建索引操作，停服是最不想看到😭，这时如果你当初建了索引别名，你会感谢你当初使用别名的决定，为何要用别名alias？🤷</p><span id="more"></span><p>Elasticsearch的索引别名alias，类似于数据库的视图。因为索引别名alias是映射到之前已创建的索引上的，对你要创建新的索引毫无影响。在创建好新索引之后，我们只需将这别名alias映射到新创建的别名上即可，这些操作只需要在服务器上通过指令操作即可，完全不影响线上服务，实现无缝切换索引。然后再将老的索引删掉即可，以节省空间。</p><h2 id="1-创建一个索引"><a href="#1-创建一个索引" class="headerlink" title="1. 创建一个索引"></a>1. 创建一个索引</h2><p>创建一个索引，名为<code>goods</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -XPUT 10.10.13.234:9200/goods</span></span><br></pre></td></tr></table></figure><h2 id="2-为索引创建mapping"><a href="#2-为索引创建mapping" class="headerlink" title="2. 为索引创建mapping"></a>2. 为索引创建mapping</h2><p>为索引<code>goods</code>创建<code>mapping</code>，这里制定<code>content</code>字段属性使用ik中文分词器，只要制定搜索<code>content</code>内容就会查询出分词之后的关联结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -XPOST 10.10.13.234:9200/goods/fulltext/_mapping -d<span class="string">&#x27;</span></span></span><br><span class="line">&#123;</span><br><span class="line">    &quot;fulltext&quot;: &#123;</span><br><span class="line">             &quot;_all&quot;: &#123;</span><br><span class="line">            &quot;analyzer&quot;: &quot;ik&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;content&quot;: &#123;</span><br><span class="line">                &quot;type&quot; : &quot;string&quot;,</span><br><span class="line">                &quot;boost&quot; : 8.0,</span><br><span class="line">                &quot;term_vector&quot; : &quot;with_positions_offsets&quot;,</span><br><span class="line">                &quot;analyzer&quot; : &quot;ik&quot;,</span><br><span class="line">                &quot;include_in_all&quot; : true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><p>这里创建的索引<code>goods</code>，如果未使用别名，程序中也是用<code>goods</code>这个索引名，如果建了新的索引，那么程序也要用新的索引名称，这是不友好的，如果用了索引别名alias就可以解决这个问题，继续看后面的操作。</p><h2 id="3-插入数据"><a href="#3-插入数据" class="headerlink" title="3. 插入数据"></a>3. 插入数据</h2><p>插入一些测试数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -XPOST 10.10.13.234:9200/goods/fulltext/1 -H <span class="string">&#x27;Content-Type:application/json&#x27;</span> -d<span class="string">&#x27;</span></span></span><br><span class="line">&#123; &quot;content&quot;: &quot;进口华盛顿红蛇果 苹果4个装 单果重约180g 新鲜水果&quot; &#125;&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="string"> curl -XPOST 10.10.13.234:9200/goods/fulltext/2 -H &#x27;</span>Content-Type:application/json<span class="string">&#x27; -d&#x27;</span></span></span><br><span class="line">&#123; &quot;content&quot;: &quot;华盛顿苹果礼盒 8个装（4个红蛇果+4个青苹果）单果重约145g-180g 新鲜水果礼盒&quot; &#125;&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -XPOST 10.10.13.234:9200/goods/fulltext/4 -H <span class="string">&#x27;Content-Type:application/json&#x27;</span> -d<span class="string">&#x27;</span></span></span><br><span class="line">&#123; &quot;content&quot;: &quot;新疆阿克苏冰糖心 约5kg 单果200-250g（7Fresh 专供）&quot; &#125;&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="string"> curl -XPOST 10.10.13.234:9200/goods/fulltext/5 -H &#x27;</span>Content-Type:application/json<span class="string">&#x27; -d&#x27;</span></span></span><br><span class="line">&#123; &quot;content&quot;: &quot;果花 珍珠岩 无土栽培基质 颗粒状 保温性能好 园艺用品&quot; &#125;&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看goods的mpping，后面需要与索引别名的mapping对比</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -XGET <span class="string">&quot;10.10.13.234:9200/goods/_mapping?pretty&quot;</span></span> </span><br></pre></td></tr></table></figure><h2 id="4-测试分词高亮"><a href="#4-测试分词高亮" class="headerlink" title="4. 测试分词高亮"></a>4. 测试分词高亮</h2><p>测试命中分词高亮：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -XPOST 10.10.13.234:9200/goods/fulltext/_search -H <span class="string">&#x27;Content-Type:application/json&#x27;</span> -d<span class="string">&#x27;</span></span></span><br><span class="line">&#123; &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;content&quot; : &quot;进口水果&quot; &#125;&#125;,</span><br><span class="line">    &quot;highlight&quot; : &#123;</span><br><span class="line">        &quot;pre_tags&quot; : [&quot;&lt;tag1&gt;&quot;, &quot;&lt;tag2&gt;&quot;],</span><br><span class="line">        &quot;post_tags&quot; : [&quot;&lt;/tag1&gt;&quot;, &quot;&lt;/tag2&gt;&quot;],</span><br><span class="line">        &quot;fields&quot; : &#123;</span><br><span class="line">            &quot;content&quot; : &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><h2 id="5-创建索引别名"><a href="#5-创建索引别名" class="headerlink" title="5. 创建索引别名"></a>5. 创建索引别名</h2><p>新建同义词mapping：</p><p>(1) 创建一个索引，这个索引的名称最好带上版本号，比如my_index_v1,my_index_v2等;</p><p>(2) 创建一个指向本索引的同义词。为的是以后不停服更新mapping。</p><p>步骤(1)的索引我们以刚刚创建的<code>goods</code>所以为例，创建别名映射到<code>goods</code>所以上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -XPOST 10.10.13.234:9200/_aliases -d <span class="string">&#x27;</span></span>  </span><br><span class="line">&#123;  </span><br><span class="line">    &quot;actions&quot;: [  </span><br><span class="line">        &#123; &quot;add&quot;: &#123;  </span><br><span class="line">            &quot;alias&quot;: &quot;my_index&quot;,  </span><br><span class="line">            &quot;index&quot;: &quot;goods&quot;  </span><br><span class="line">        &#125;&#125;  </span><br><span class="line">    ]  </span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><p>然后查看索引<code>my_index</code>的mapping：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -XGET <span class="string">&quot;10.10.13.234:9200/my_index/_mapping?pretty&quot;</span></span> </span><br></pre></td></tr></table></figure><p>索引<code>my_index</code>与<code>goods</code>的<code>mapping</code>一致。</p><h2 id="6-切换索引"><a href="#6-切换索引" class="headerlink" title="6. 切换索引"></a>6. 切换索引</h2><p>再创建一个索引<code>goods_v2</code>，重复步骤1、2，名称换成<code>goods_v2</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -XPUT 10.10.13.234:9200/goods_v2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -XPOST 10.10.13.234:9200/goods_v2/fulltext/_mapping -d<span class="string">&#x27;</span></span></span><br><span class="line">&#123;</span><br><span class="line">    &quot;fulltext&quot;: &#123;</span><br><span class="line">             &quot;_all&quot;: &#123;</span><br><span class="line">            &quot;analyzer&quot;: &quot;ik&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;content&quot;: &#123;</span><br><span class="line">                &quot;type&quot; : &quot;string&quot;,</span><br><span class="line">                &quot;boost&quot; : 8.0,</span><br><span class="line">                &quot;term_vector&quot; : &quot;with_positions_offsets&quot;,</span><br><span class="line">                &quot;analyzer&quot; : &quot;ik&quot;,</span><br><span class="line">                &quot;include_in_all&quot; : true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><p>插入测试数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -XPOST 10.10.13.234:9200/goods_v2/fulltext/1 -H <span class="string">&#x27;Content-Type:application/json&#x27;</span> -d<span class="string">&#x27;</span></span></span><br><span class="line">&#123; &quot;content&quot;: &quot;进口华盛顿红蛇果 苹果4个装 单果重约180g 新鲜水果&quot;,</span><br><span class="line">&quot;number&quot;: 21&#125;&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">查看goods_v2的mpping，后面需要与索引别名的mapping对比</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="string"> curl -XGET &quot;10.10.13.234:9200/goods_v2/_mapping?pretty&quot;</span></span></span><br></pre></td></tr></table></figure><p><strong>重点是更换索引的操作</strong>，将<code>my_index</code>别名切换映射到<code>goods_v2</code>上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -XPOST 10.10.13.234:9200/_aliases -d <span class="string">&#x27;</span></span></span><br><span class="line">&#123;</span><br><span class="line">    &quot;actions&quot;: [</span><br><span class="line">        &#123; &quot;remove&quot;: &#123;</span><br><span class="line">            &quot;alias&quot;: &quot;my_index&quot;,</span><br><span class="line">            &quot;index&quot;: &quot;goods&quot;</span><br><span class="line">        &#125;&#125;,</span><br><span class="line">        &#123; &quot;add&quot;: &#123;</span><br><span class="line">            &quot;alias&quot;: &quot;my_index&quot;,</span><br><span class="line">            &quot;index&quot;: &quot;goods_v2&quot;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">查看my_index的mpping，与前面goods_v2的mapping对比</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="string"> curl -XGET &quot;10.10.13.234:9200/my_index/_mapping?pretty&quot;</span></span> </span><br></pre></td></tr></table></figure><p>我们可以对比索引<code>my_index</code>与<code>goods_v2</code>的<code>mapping</code>是一致的，索引切换成功。</p><p>创建了索引别名alias的话，程序中制定这个<code>my_index</code>这个别名即可，后需要创建新索引，只需切换索引映射到新索引上即可，实现不停服更新mapping。</p><p>下一篇我们来说下通过<strong>创建spring boot工程，通过es的java api操作es，实现分页查询和中文分词检索</strong>的功能。</p>]]></content:encoded>
      
      
      <category domain="https://wonderomg.github.io/categories/elasticsearch/">elasticsearch</category>
      
      
      <category domain="https://wonderomg.github.io/tags/elasticsearch/">elasticsearch</category>
      
      <category domain="https://wonderomg.github.io/tags/ik%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/">ik中文分词</category>
      
      <category domain="https://wonderomg.github.io/tags/alias/">alias</category>
      
      
      <comments>https://wonderomg.github.io/2018/05/16/Elasticsearch%E5%AE%9E%E8%B7%B5%E7%B4%A2%E5%BC%95%E5%8F%8A%E7%B4%A2%E5%BC%95%E5%88%AB%E5%90%8Dalias/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Elasticsearch实践(1)-搭建及IK中文分词</title>
      <link>https://wonderomg.github.io/2018/05/15/Elasticsearch%E5%AE%9E%E8%B7%B5%E6%90%AD%E5%BB%BA%E5%8F%8AIK%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/</link>
      <guid>https://wonderomg.github.io/2018/05/15/Elasticsearch%E5%AE%9E%E8%B7%B5%E6%90%AD%E5%BB%BA%E5%8F%8AIK%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/</guid>
      <pubDate>Mon, 14 May 2018 16:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;🔍近期在做商品搜索优化，对比了Solr与Elasticsearch的区别，两者都是基于Lucene实现的封装，但es在数据量越大的情况下实时检索性能优于solr，更适用于实时商品搜索，于是选用了es，下面介绍elasticsearch搜索引擎的搭建及使用，这里使用的是2.2.1的es版本，以及1.8.1的ik分词版本。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>🔍近期在做商品搜索优化，对比了Solr与Elasticsearch的区别，两者都是基于Lucene实现的封装，但es在数据量越大的情况下实时检索性能优于solr，更适用于实时商品搜索，于是选用了es，下面介绍elasticsearch搜索引擎的搭建及使用，这里使用的是2.2.1的es版本，以及1.8.1的ik分词版本。</p><span id="more"></span><h1 id="安装es及IK中文分词"><a href="#安装es及IK中文分词" class="headerlink" title="安装es及IK中文分词"></a>安装es及IK中文分词</h1><h2 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1. 下载安装包"></a>1. 下载安装包</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##我的环境是Redhat6.4，此处使用的是es2.2.1版本</span></span><br><span class="line"><span class="comment">##（1）可以使用指令安装</span></span><br><span class="line"><span class="meta">$</span> <span class="string">yum install https://download.elasticsearch.org/elasticsearch/release/org/elasticsearch/distribution/rpm/elasticsearch/2.2.1/elasticsearch-2.2.1.rpm</span></span><br><span class="line"><span class="comment">##（2）也可以直接下载文件，然后上传至linux目录下</span></span><br><span class="line"><span class="attr">https</span>:<span class="string">//download.elasticsearch.org/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.2.1/elasticsearch-2.2.1.tar.gz</span></span><br></pre></td></tr></table></figure><h2 id="2-上传安装文件到linux目录并解压"><a href="#2-上传安装文件到linux目录并解压" class="headerlink" title="2. 上传安装文件到linux目录并解压"></a>2. 上传安装文件到linux目录并解压</h2><p>我这里将<code>elasticsearch-2.2.1.tar.gz</code>文件放至<code>/opt/elasticsearch</code>目录下。</p><p>解压：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/elasticsearch</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf elasticsearch-2.2.1.tar.gz</span></span><br></pre></td></tr></table></figure><p><strong>此时切记不能用 <code>./bin/elasticsearch</code>启动，因为在root权限下会提示错误</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.RuntimeException: don&#x27;t run elasticsearch as root.</span><br></pre></td></tr></table></figure><h2 id="3-新添加一个elasticsearch用户"><a href="#3-新添加一个elasticsearch用户" class="headerlink" title="3. 新添加一个elasticsearch用户"></a>3. 新添加一个elasticsearch用户</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加elasticsearch用户：</span></span><br><span class="line">$ useradd elasticsearch</span><br><span class="line"><span class="comment">#给用户elasticsearch设置密码，连续输入2次：</span></span><br><span class="line">$ passwd elasticsearch</span><br><span class="line"><span class="comment">#创建一个用户组es:</span></span><br><span class="line">$ groupadd es</span><br><span class="line"><span class="comment">#分配elasticsearch到es组:</span></span><br><span class="line">$ usermod -G es elasticsearch</span><br><span class="line"><span class="comment">#在elasticsearch 根目录下，给定用户权限。-R表示逐级（N层目录） ， * 表示 任何文件:</span></span><br><span class="line">$ chown -R elasticsearch:es *</span><br><span class="line"><span class="comment">#切换到elasticsearch用户:</span></span><br><span class="line">$ su elasticsearch</span><br></pre></td></tr></table></figure><h2 id="4-修改配置文件"><a href="#4-修改配置文件" class="headerlink" title="4. 修改配置文件"></a>4. 修改配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi config/elasticsearch.yml</span></span><br></pre></td></tr></table></figure><p>修改以下内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cluster name</span></span><br><span class="line"><span class="meta">cluster.name</span>: <span class="string">my-application</span></span><br><span class="line"><span class="comment">#节点名称</span></span><br><span class="line"><span class="meta">node.name</span>: <span class="string">node-1</span></span><br><span class="line"><span class="meta">path.data</span>: <span class="string">/opt/elasticsearch/elasticsearch-2.2.1/data</span></span><br><span class="line"><span class="meta">path.logs</span>: <span class="string">/opt/elasticsearch/elasticsearch-2.2.1/logs</span></span><br><span class="line"><span class="comment">#绑定IP和端口</span></span><br><span class="line"><span class="meta">network.host</span>: <span class="string">0.0.0.0</span></span><br><span class="line"><span class="meta">http.port</span>: <span class="string">9200</span></span><br></pre></td></tr></table></figure><h2 id="5-安装head"><a href="#5-安装head" class="headerlink" title="5. 安装head"></a>5. 安装head</h2><p>head是elasticsearch的可视化工具，可以不用安装head，如果不需要安装，跳过此步骤。</p><p>需要注意的是，es2.x的版本head可直接安装，es5.x以上的版本需要先安装nodejs。</p><h3 id="5-1-ES2-x-x版本安装head"><a href="#5-1-ES2-x-x版本安装head" class="headerlink" title="5.1. ES2.x.x版本安装head"></a>5.1. ES2.x.x版本安装head</h3><p>在<code>/opt/elasticsearch/elasticsearch-2.2.1/</code>目录下新建文件夹：plugins</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/elasticsearch/elasticsearch-2.2.1/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir plugins</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> elasticsearch/bin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./plugin install mobz/elasticsearch-head</span></span><br></pre></td></tr></table></figure><p>安装成功即可。启动es之后，访问<code>http://ip:9200/_plugin/head/</code>即可看到可视化界面。</p><h3 id="5-2-ES5-x-x版本安装head"><a href="#5-2-ES5-x-x版本安装head" class="headerlink" title="5.2 ES5.x.x版本安装head"></a>5.2 ES5.x.x版本安装head</h3><p>ES5.x版本暂时不支持直接安装，但是head作者提供了另一种安装方法。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git://github.com/mobz/elasticsearch-head.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> elasticsearch-head</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm run start</span></span><br></pre></td></tr></table></figure><p>然后打开<code>http://localhost:9100/</code>访问即可。</p><p>如果提示未安装node.js，先安装node.js，</p><p>node.js官网：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p><p>选择安装包，我这边是64位linux，下载的是<a href="https://nodejs.org/dist/v8.11.3/node-v8.11.3-linux-x64.tar.xz">https://nodejs.org/dist/v8.11.3/node-v8.11.3-linux-x64.tar.xz</a></p><p>解压（注：如果是虚拟机，不要在共享文件夹中解压，会报<code>Cannot create symlink to</code>创建软链的错，请放至linux下解压）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> xz -d node-v8.11.3-linux-x64.tar.xz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -xvf node-v8.11.3-linux-x64.tar</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mv node-v8.11.3-linux-x64 nodejs</span></span><br><span class="line"><span class="meta">#</span><span class="bash">确认一下nodejs下bin目录是否有node 和npm文件，如果有执行软连接，如果没有重新下载执行上边步骤；建立软连接，变为全局:</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ln -s /opt/nodejs/bin/npm /usr/<span class="built_in">local</span>/bin/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ln -s /opt/nodejs/bin/node /usr/<span class="built_in">local</span>/bin/</span></span><br><span class="line"><span class="meta">#</span><span class="bash">检查是否安装成功</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> node -v</span></span><br></pre></td></tr></table></figure><h2 id="6-启动ES"><a href="#6-启动ES" class="headerlink" title="6. 启动ES"></a>6. 启动ES</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/elasticsearch/elasticsearch-2.2.1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> su elasticsearch</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/elasticsearch</span></span><br></pre></td></tr></table></figure><p>再访问<code>http://ip:9200/_plugin/head/</code>即可。</p><h2 id="7-安装IK分词器"><a href="#7-安装IK分词器" class="headerlink" title="7. 安装IK分词器"></a>7. 安装IK分词器</h2><p>在<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p><p>此处选择与es版本对应的ik分词版本，我这里下载的是<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v1.8.1/elasticsearch-analysis-ik-1.8.1.zip">elasticsearch-analysis-ik-1.8.1.zip</a>，在 <code>/opt/elasticsearch/elasticsearch-2.2.1/plugins</code>目录下新建文件夹：<code>ik</code>;将<code>elasticsearch-analysis-ik-1.8.1.zip</code>的解压文件放入<code>ik</code>目录下，并将解压后的<code>config</code>下的<code>ik</code>文件夹放入 <code>/opt/elasticsearch/elasticsearch-2.2.1/config</code>下面;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> unzip elasticsearch-analysis-ik-1.8.1.zip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/elasticsearch/elasticsearch-2.2.1/plugins</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir ik</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp -rf /opt/elasticsearch/elasticsearch-analysis-ik-1.8.1/ ik/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mv /opt/elasticsearch/elasticsearch-analysis-ik-1.8.1/config/ik /opt/elasticsearch/elasticsearch-2.2.1/config</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/elasticsearch/elasticsearch-2.2.1/config</span></span><br></pre></td></tr></table></figure><p>在<code>/config/elasticsearch.yml</code>文件的最后加上一句话：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">index.analysis.analyzer.ik.type</span> : <span class="string">&quot;ik&quot;</span></span><br></pre></td></tr></table></figure><p>然后启动es，测试分词效果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl &#x27;10.10.13.234:9200/index/_analyze?analyzer=ik&amp;pretty=true&#x27; -d &#x27;</span><br><span class="line">&#123;</span><br><span class="line">&quot;text&quot;:&quot;世界如此之大 进口水果&quot;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><p>或者浏览器访问<code>http://ip:9200/_analyze?analyzer=ik&amp;pretty=true&amp;text=sojson在线工具测试分词</code>，即可看到中文分词效果。</p><p>至此，elasticsearch搭建完成，下一篇我们来说下<strong>索引的创建</strong>。</p>]]></content:encoded>
      
      
      <category domain="https://wonderomg.github.io/categories/elasticsearch/">elasticsearch</category>
      
      
      <category domain="https://wonderomg.github.io/tags/elasticsearch/">elasticsearch</category>
      
      <category domain="https://wonderomg.github.io/tags/ik%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/">ik中文分词</category>
      
      
      <comments>https://wonderomg.github.io/2018/05/15/Elasticsearch%E5%AE%9E%E8%B7%B5%E6%90%AD%E5%BB%BA%E5%8F%8AIK%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Packet for query is too large (84 &gt; -1).</title>
      <link>https://wonderomg.github.io/2018/03/15/Packet%20for%20query%20is%20too%20large/</link>
      <guid>https://wonderomg.github.io/2018/03/15/Packet%20for%20query%20is%20too%20large/</guid>
      <pubDate>Wed, 14 Mar 2018 16:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;ibatis工程使用resin配置mysql出现&lt;code&gt;Packet for query is too large (84 &amp;gt; -1).&lt;/code&gt;错误。&lt;/p&gt;
&lt;p&gt;windows下的resin配置连接mysql，常用的安全的做法是将数据库信息配置到conf目录下的resin.xml文件中。</description>
      
      
      
      <content:encoded><![CDATA[<p>ibatis工程使用resin配置mysql出现<code>Packet for query is too large (84 &gt; -1).</code>错误。</p><p>windows下的resin配置连接mysql，常用的安全的做法是将数据库信息配置到conf目录下的resin.xml文件中。<span id="more"></span></p><p>因为resin连接mysql不是必须的，所以resin本身没有提供mysql-connector的jar包，需要自己加到resin目录下的lib里面，我加了个<code>mysql-connector-java-5.1.45-bin.jar</code>进去，然而在运行工程执行数据库查询操作的时候，却出现了问题，报如下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.dao.TransientDataAccessResourceException: SqlMapClient operation; SQL [];   </span><br><span class="line">--- The error occurred while applying a parameter map.  </span><br><span class="line">--- Check the T_USER_INFO.selectByMap-InlineParameterMap.  </span><br><span class="line">--- Check the statement (query failed).  </span><br><span class="line">--- Cause: com.mysql.jdbc.PacketTooBigException: Packet for query is too large (84 &gt; -1). You can change this value on the server by setting the max_allowed_packet&#x27; variable.; nested exception is com.ibatis.common.jdbc.exception.NestedSQLException:   </span><br><span class="line">--- The error occurred while applying a parameter map.  </span><br><span class="line">--- Check the T_USER_INFO.selectByMap-InlineParameterMap.  </span><br><span class="line">--- Check the statement (query failed).  </span><br><span class="line">--- Cause: com.mysql.jdbc.PacketTooBigException: Packet for query is too large (84 &gt; -1). You can change this value on the server by setting the max_allowed_packet&#x27; variable.</span><br></pre></td></tr></table></figure><p>只进行查询却出现<code>Packet for query is too large</code>，而且查询的条件只有几个字母，网上搜了很多解答，都是说需要把mysql的<code>max_allowed_packet</code>参数调大，但是我通过<code>show VARIABLES like &#39;%max_allowed_packet%&#39;;</code>查询的结果也很大，如果是参数过小，应该是提示大于数据库中设置的packet的值，而不应该报-1。</p><p>最后发现有个帖子说是<code>mysql-connector-java</code>jar包的版本问题，版本不能太高，随后我将<code>mysql-connector-java-5.1.45-bin.jar</code>换成<code>mysql-connector-java-5.1.26-bin.jar</code>，不再出现packet错误，问题解决。</p><p>可能是因为我<strong>用的是<code>ibatis2.0</code>版本的缘故，不支持太高的mysql连接jar版本</strong>，换成<code>mysql-connector-java-5.1.40</code>以下版本即可解决<code>Packet for query is too large (84 &gt; -1)</code>问题。</p>]]></content:encoded>
      
      
      <category domain="https://wonderomg.github.io/categories/ibatis/">ibatis</category>
      
      <category domain="https://wonderomg.github.io/categories/ibatis/mysql/">mysql</category>
      
      <category domain="https://wonderomg.github.io/categories/ibatis/mysql/resin/">resin</category>
      
      
      <category domain="https://wonderomg.github.io/tags/zookeeper/">zookeeper</category>
      
      <category domain="https://wonderomg.github.io/tags/mysql/">mysql</category>
      
      <category domain="https://wonderomg.github.io/tags/ibatis/">ibatis</category>
      
      <category domain="https://wonderomg.github.io/tags/resin/">resin</category>
      
      
      <comments>https://wonderomg.github.io/2018/03/15/Packet%20for%20query%20is%20too%20large/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>zookeeper提示Unable to read additional data from server sessionid 0x</title>
      <link>https://wonderomg.github.io/2017/09/15/zookeeper%E6%8F%90%E7%A4%BAUnable%20to%20read%20additional%20data%20from%20server%20sessionid%200x/</link>
      <guid>https://wonderomg.github.io/2017/09/15/zookeeper%E6%8F%90%E7%A4%BAUnable%20to%20read%20additional%20data%20from%20server%20sessionid%200x/</guid>
      <pubDate>Thu, 14 Sep 2017 16:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;配置zookeeper集群，一开始配置了两台机器server.1和server.2。&lt;/p&gt;
&lt;p&gt;配置参数，在zoo.cfg中指定了整个zookeeper集群的server编号、地址和端口：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;server.1=10.10.16.151:2888:3888&lt;br&gt;server.2=10.10.16.234:2888:3888&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后为这两个个节点创建对应的编号文件，在/tmp/zookeeper/data/myid文件中。如下：</description>
      
      
      
      <content:encoded><![CDATA[<p>配置zookeeper集群，一开始配置了两台机器server.1和server.2。</p><p>配置参数，在zoo.cfg中指定了整个zookeeper集群的server编号、地址和端口：</p><blockquote><p>server.1=10.10.16.151:2888:3888<br>server.2=10.10.16.234:2888:3888</p></blockquote><p>然后为这两个个节点创建对应的编号文件，在/tmp/zookeeper/data/myid文件中。如下：<span id="more"></span></p><p>在server.1=10.10.16.151机器上执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /tmp/zookeeper/data/myid</span><br></pre></td></tr></table></figure><p>在server.1=10.10.16.234机器上执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 2 &gt; /tmp/zookeeper/data/myid</span><br></pre></td></tr></table></figure><p>启动server.1测试dubbo服务，使用<code>zkServer.sh start</code>启动了server.1，然后使用<code>zkServer.sh status</code>查看工作状态，显示</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error contacting service. It is probably not running.</span><br></pre></td></tr></table></figure><p>通过<code>zkCli.sh -server 10.10.16.151:2181</code>查看服务详细，发现服务提示了下面的错误信息。</p><p>启动时提示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2017-09-15 14:57:27,139 [myid:] - INFO  [main-SendThread(10.10.16.151:2181):ClientCnxn<span class="variable">$SendThread</span>@1035] - Opening socket connection to server 10.10.16.151/10.10.16.151:2181. Will not attempt to authenticate using SASL (java.lang.SecurityException: Ϟ·¨¶¨λµȂ¼Ƥ׃)</span><br><span class="line">2017-09-15 14:57:27,140 [myid:] - INFO  [main-SendThread(10.10.16.151:2181):ClientCnxn<span class="variable">$SendThread</span>@877] - Socket connection established to 10.10.16.151/10.10.16.151:2181, initiating session</span><br><span class="line">2017-09-15 14:57:27,143 [myid:] - INFO  [main-SendThread(10.10.16.151:2181):ClientCnxn<span class="variable">$SendThread</span>@1161] - Unable to <span class="built_in">read</span> additional data from server sessionid 0x0, likely server has closed socket, closing socket connection and attempting reconnect</span><br></pre></td></tr></table></figure><p>后来才搞明白，由于我在zoo.cfg中配置了2台机器，但是只启动了1台，zookeeper就会认为服务处于不可用状态。</p><p><strong>通过zookeeper的选举算法得知，当整个集群超过半数机器宕机，zookeeper会认为集群处于不可用状态。</strong>所以启动2台服务正常。</p><p>然后我又增加了1台<code>server.3=10.10.16.241:2888:3888</code>机器节点，在3台都启动的情况下，关掉其中1台，服务正常，关掉2台，服务不可用。</p><p>所以，zookeeper集群只启动一台无法连接，如果启动机器数为半数及以上就可以连接了。</p>]]></content:encoded>
      
      
      <category domain="https://wonderomg.github.io/categories/zookeeper/">zookeeper</category>
      
      
      <category domain="https://wonderomg.github.io/tags/zookeeper/">zookeeper</category>
      
      <category domain="https://wonderomg.github.io/tags/%E9%9B%86%E7%BE%A4/">集群</category>
      
      
      <comments>https://wonderomg.github.io/2017/09/15/zookeeper%E6%8F%90%E7%A4%BAUnable%20to%20read%20additional%20data%20from%20server%20sessionid%200x/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>恒大 VS 上港</title>
      <link>https://wonderomg.github.io/2017/09/12/%E6%81%92%E5%A4%A7%E4%B8%BB%E4%B8%8A%E6%B8%AF%E5%AE%A2/</link>
      <guid>https://wonderomg.github.io/2017/09/12/%E6%81%92%E5%A4%A7%E4%B8%BB%E4%B8%8A%E6%B8%AF%E5%AE%A2/</guid>
      <pubDate>Mon, 11 Sep 2017 16:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;⚽很少看中超，三线伪球迷，偶得一张恒大对战上港的票，亚冠联赛1/4决赛“中国德比”第二回合，非常值得一看。于是和峰哥守情瞪着小二轮儿就往天河体育中心赶。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>⚽很少看中超，三线伪球迷，偶得一张恒大对战上港的票，亚冠联赛1/4决赛“中国德比”第二回合，非常值得一看。于是和峰哥守情瞪着小二轮儿就往天河体育中心赶。</p><span id="more"></span><p>​        首回合上港主场在上海，所以这一回合是恒大广州主场，第一回合上港4-0恒大，所以这一回恒大势必会攻势强劲。这回要5-0上港才能赢得这次比赛。</p><p>场外买了件阿兰的7号球衣。</p><p><img src="https://raw.githubusercontent.com/wonderomg/wonderomg.github.io/master/img/7th.jpg" alt="7th"></p><p>比赛开始了。</p><p><img src="https://raw.githubusercontent.com/wonderomg/wonderomg.github.io/master/img/start.jpg" alt="start"></p><p>头一回靠球迷协会这么近，整场球迷协会都在起势助威，感受到了他们真的很爱恒大，热爱足球。</p><p>我等十八线球迷也就是在进球时亢奋十秒，丢！</p><p><img src="https://raw.githubusercontent.com/wonderomg/wonderomg.github.io/master/img/fans.jpg" alt="fans"></p><p>整场下来，上港队队员受伤换下的球员不下4个，一个是部分球员状态不太好，二是恒大队员处于压力踢的太激进。</p><p>第90分钟，李学鹏头球破门，广州恒大4-0上海上港！</p><p>球迷们又是一阵亢奋！我也特激动，感觉主场来个5-0就赢了，看来胜利不远了，那个激动啊，真切感受到了足球的魅力。</p><p>可是，最怕这个可是了。</p><p>第109分钟，上港队胡尔克主罚的爆射直钻网窝死角，广州恒大4-1上海上港！恒大压力很大，穆里奇被上港队员拉倒，被罚点球，高拉特主罚命中，5-1打平了，悬的心又放下了。</p><p>常规赛结束，比赛进入加时，5-1，阿兰进俩球，高拉特进3球。压力已经在恒大队这边了，加时赛5:1，总比分恒大5-5战平上港，未分胜负，所以呢，就到了精彩的点球大战。又是加时，又是点球，双方都紧咬比分。</p><p><img src="https://raw.githubusercontent.com/wonderomg/wonderomg.github.io/master/img/penaltykick.jpg" alt="penaltykick"></p><p>不幸的是，点球上港队5罚5中，恒大队5罚4中，全场比赛结束，总比分上海上港10-9淘汰广州恒大。</p><p>一波三折，常规赛以为要输了，然后又赢了，加时加上点球，以为要赢了，结果还是输了。恒大球员的拼劲有目共睹，整场球真的很精彩，现场看球，不管是球员还是球迷带给人的都是特别感动激昂的感受，尽管广州很热，现场的热情完全掩盖了球场内的热浪。</p><p>最后回谢球迷。</p><p><img src="https://raw.githubusercontent.com/wonderomg/wonderomg.github.io/master/img/thank.jpg" alt="thank"></p><p>恒大队，虽败犹荣！</p>]]></content:encoded>
      
      
      <category domain="https://wonderomg.github.io/categories/%E9%9A%8F%E8%AE%B0/">随记</category>
      
      
      <category domain="https://wonderomg.github.io/tags/%E9%9A%8F%E8%AE%B0/">随记</category>
      
      
      <comments>https://wonderomg.github.io/2017/09/12/%E6%81%92%E5%A4%A7%E4%B8%BB%E4%B8%8A%E6%B8%AF%E5%AE%A2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>linux-crontab定时执行任务</title>
      <link>https://wonderomg.github.io/2017/07/25/linux-crontab%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/</link>
      <guid>https://wonderomg.github.io/2017/07/25/linux-crontab%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/</guid>
      <pubDate>Mon, 24 Jul 2017 16:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;　　⏱️最近碰到一个关于&lt;code&gt;crontab&lt;/code&gt;的问题。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>　　⏱️最近碰到一个关于<code>crontab</code>的问题。</p><span id="more"></span><h2 id="1-事因"><a href="#1-事因" class="headerlink" title="1. 事因"></a><strong>1. 事因</strong></h2><p>服务器部署了一个<code>C++</code>查询数据库词库的服务，以及<code>Java</code>发送目标词的服务，<code>Java</code>服务通过<code>soket</code>长连接向<code>C++</code>服务发送目标单词，然后<code>C++</code>服务返回数据库中是否存在的结果。</p><p>期间，由于数据库有时增加单词需要重启服务，手写了个定时脚本来重启该<code>C++</code>服务。</p><p>某一次为了调试，把改定时脚本关了，通过<code>ps -ef |grep xxx</code>命令查看服务父子进程情况，发现父进程还是每隔十分钟退出，服务会重启，想了许久不知道哪出了问题。</p><p>最后询问运维才想起，之前还用了<code>linux</code>自带的<code>crontab</code>设置过每隔十分钟重启服务，没有删除<code>crontab</code>里面的那条设置。</p><p>所以我们就来学习一下<code>linux</code>自带的可设置定时指定任务的<code>crontab</code>。</p><h2 id="2-初识crontab"><a href="#2-初识crontab" class="headerlink" title="2. 初识crontab"></a><strong>2. 初识crontab</strong></h2><p><code>cron</code>是一个服务进程，<code>cron</code>服务提供<code>crontab</code>命令来设定<code>cron</code>服务的，以下是这个命令的一些参数与说明：</p><ul><li><code>crontab -u  //设定某个用户的cron服务，一般root用户在执行这个命令的时候需要此参数 </code></li><li><code>crontab -l  //列出某个用户cron服务的详细内容 </code></li><li><code>crontab -r  //删除某个用户的cron服务 </code></li><li><code>crontab -e  //编辑某个用户的cron服务 </code></li></ul><h2 id="3-基本用法"><a href="#3-基本用法" class="headerlink" title="3. 基本用法"></a><strong>3. 基本用法</strong></h2><p>基本格式 :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*   *   *   *   *   command</span><br></pre></td></tr></table></figure><p>​    **分　时　日　月　周　命令 **</p><p>第1列表示分钟1～59 每分钟用*或者 */1表示 ；<br>第2列表示小时1～23（0表示0点） ；<br>第3列表示日期1～31 ；<br>第4列表示月份1～12 ；<br>第5列标识号星期0～6（0表示星期天） ；<br>第6列要运行的命令 。</p><p><code>crontab</code>的一些使用例子:</p><p><code>*/10 * * * * (cd /opt/resin/bin; ./resin.sh restart)</code></p><p>表示每隔10分重启<code>resin</code>服务；</p><p><code>30 1 * * * (cd /opt/resin/bin; ./resin.sh restart)</code></p><p>表示每天1点30分重启<code>resin</code>服务；</p><p><code>* 23-5/1 * * * (cd /opt/resin/bin; ./resin.sh restart)</code></p><p>表示每天23点到次日5点之间每隔1小时重启<code>resin</code>服务；</p>]]></content:encoded>
      
      
      <category domain="https://wonderomg.github.io/categories/linux/">linux</category>
      
      
      <category domain="https://wonderomg.github.io/tags/crontab/">crontab</category>
      
      
      <comments>https://wonderomg.github.io/2017/07/25/linux-crontab%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>idea搭建springdata+mongodb+maven+springmvc</title>
      <link>https://wonderomg.github.io/2017/06/06/idea%E6%90%AD%E5%BB%BAspringdata+mongodb+maven+springmvc/</link>
      <guid>https://wonderomg.github.io/2017/06/06/idea%E6%90%AD%E5%BB%BAspringdata+mongodb+maven+springmvc/</guid>
      <pubDate>Mon, 05 Jun 2017 16:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;今天我们来学习一下SpringData操作MongoDB。&lt;br&gt;项目环境：IntelliJ IDEA2017+maven3.5.0+MongoDB 3.2+JDK1.7+spring4.3.8</description>
      
      
      
      <content:encoded><![CDATA[<p>今天我们来学习一下SpringData操作MongoDB。<br>项目环境：IntelliJ IDEA2017+maven3.5.0+MongoDB 3.2+JDK1.7+spring4.3.8 <span id="more"></span></p><p>推荐网站（适合学习各种知识的基础）：<a href="http://www.runoob.com/">http://www.runoob.com/</a></p><p>mongo安装请参考：<a href="http://www.runoob.com/mongodb/mongodb-window-install.html">http://www.runoob.com/mongodb/mongodb-window-install.html</a></p><h2 id="1-创建maven工程"><a href="#1-创建maven工程" class="headerlink" title="1. 创建maven工程"></a><strong>1. 创建maven工程</strong></h2><p>首相创建maven工程，New project:<br><img src="https://raw.githubusercontent.com/wonderomg/SpringData-mongdb/master/images/create-1.png" alt="创建maven工程"></p><p><img src="https://raw.githubusercontent.com/wonderomg/SpringData-mongdb/master/images/create-2.png" alt="自行填写"></p><p>这里不使用idea自带maven插件，改用下载好的3.5.0版maven；</p><p>由于最近osChina的maven仓库挂掉，推荐大家使用阿里的镜像，速度快的飞起<br><code>maven</code>配置：<code>D:\apache-maven-3.5.0\conf\setting.xml</code>中找到<code>mirrors</code>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wonderomg/SpringData-mongdb/master/images/create-3.png" alt="选择下好的本地maven3.5.0"></p><p><img src="https://raw.githubusercontent.com/wonderomg/SpringData-mongdb/master/images/create-4.png" alt="next"></p><p>项目结构如下图，手动创建相关文件夹及文件，并设置文件夹的对应属性：</p><p><img src="https://raw.githubusercontent.com/wonderomg/SpringData-mongdb/master/images/create-5.png" alt="工程目录"></p><p><img src="https://raw.githubusercontent.com/wonderomg/SpringData-mongdb/master/images/create-6.png" alt="目录结构"></p><p>至此，maven工程创建完毕。</p><h2 id="2-访问mongodb数据方式"><a href="#2-访问mongodb数据方式" class="headerlink" title="2. 访问mongodb数据方式"></a><strong>2. 访问mongodb数据方式</strong></h2><p>这里<code>dao</code>与<code>mongoDao</code>分别为<code>mongoDB</code>的两种查询方式：</p><blockquote><p>(1) <code>dao</code>为<code>JPA</code>的查询方式（请参考<code>springdataJPA</code>）；</p><p>(2) <code>mongoDao</code>使用<code>mongoTemplate</code>，类似于关系型数据库使用的<code>jdbcTemplate</code>。</p></blockquote><h2 id="3-详细代码"><a href="#3-详细代码" class="headerlink" title="3. 详细代码"></a><strong>3. 详细代码</strong></h2><p>先看配置文件<br>spring-context.xml为最基本的<code>spring</code>配置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描service包嗲所有使用注解的类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lewis.mongo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入mongodb的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mongo.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring-web.xml为<code>springmvc</code>的基本配置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置springmvc--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.开启springmvc注解模式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--简化配置：</span></span><br><span class="line"><span class="comment">        (1)主动注册DefaultAnnotationHandlerMapping,AnnotationMethodHandlerAdapter</span></span><br><span class="line"><span class="comment">        (2)提供一系列功能：数据绑定，数字和日期的format @NumberFormt @DataTimeFormat，xml json默认的读写支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--servlet-mapping--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2静态资源默认的servlet配置，</span></span><br><span class="line"><span class="comment">        （1）允许对静态资源的处理：js，gif</span></span><br><span class="line"><span class="comment">        （2）允许使用“/”做整体映射--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 容器默认的DefaultServletHandler处理 所有静态内容与无RequestMapping处理的URL--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--3:配置jsp 显示viewResolver--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4自动扫描且只扫描@Controller --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lewis.mongo.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义无需Controller的url&lt;-&gt;view直接映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;redirect:/hi/hello&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring-mongo.xml为mongo配置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mongo</span>=<span class="string">&quot;http://www.springframework.org/schema/data/mongo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/data/mongo</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/data/mongo/spring-mongo.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载mongodb的属性配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:mongo.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring连接mongodb数据库的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mongo:mongo-client</span> <span class="attr">replica-set</span>=<span class="string">&quot;$&#123;mongo.hostport&#125;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mongo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mongo:client-options</span> <span class="attr">connections-per-host</span>=<span class="string">&quot;$&#123;mongo.connectionsPerHost&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">threads-allowed-to-block-for-connection-multiplier</span>=<span class="string">&quot;$&#123;mongo.threadsAllowedToBlockForConnectionMultiplier&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">connect-timeout</span>=<span class="string">&quot;$&#123;mongo.connectTimeout&#125;&quot;</span> <span class="attr">max-wait-time</span>=<span class="string">&quot;$&#123;mongo.maxWaitTime&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">socket-timeout</span>=<span class="string">&quot;$&#123;mongo.socketTimeout&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mongo:mongo-client</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mongo的工厂，通过它来取得mongo实例,dbname为mongodb的数据库名，没有的话会自动创建 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mongo:db-factory</span> <span class="attr">id</span>=<span class="string">&quot;mongoDbFactory&quot;</span> <span class="attr">dbname</span>=<span class="string">&quot;mongoLewis&quot;</span> <span class="attr">mongo-ref</span>=<span class="string">&quot;mongo&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 只要使用这个调用相应的方法操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mongoTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.data.mongodb.core.MongoTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;mongoDbFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mongoDbFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mongodb bean的仓库目录，会自动扫描扩展了MongoRepository接口的接口进行注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mongo:repositories</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lewis.mongo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mongo.properties:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mongo.hostport</span>=<span class="string">10.10.16.234:27017  </span></span><br><span class="line"><span class="meta">mongo.connectionsPerHost</span>=<span class="string">8  </span></span><br><span class="line"><span class="meta">mongo.threadsAllowedToBlockForConnectionMultiplier</span>=<span class="string">4  </span></span><br><span class="line"><span class="comment">#连接超时时间</span></span><br><span class="line"><span class="meta">mongo.connectTimeout</span>=<span class="string">1000  </span></span><br><span class="line"><span class="comment">#等待时间</span></span><br><span class="line"><span class="meta">mongo.maxWaitTime</span>=<span class="string">1500  </span></span><br><span class="line"><span class="meta">mongo.autoConnectRetry</span>=<span class="string">true  </span></span><br><span class="line"><span class="meta">mongo.socketKeepAlive</span>=<span class="string">true  </span></span><br><span class="line"><span class="comment">#Socket超时时间</span></span><br><span class="line"><span class="meta">mongo.socketTimeout</span>=<span class="string">1500  </span></span><br><span class="line"><span class="meta">mongo.slaveOk</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>pom.xml，这里要注意的是<code>junit</code>版本需要4.12以上，不然idea会报错；<code>spring-data-mongodb</code>版本要1.10.1以上；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring-framework-bom 版本号--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.8.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.liu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mongo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mongo Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用junit4，注解的方式测试--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;junit&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;4.11&lt;/version&gt;</span></span><br><span class="line"><span class="comment">            &lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志 slf4j,log4j,logback,common-logging--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--slf4j是规范/接口--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--log4j,logback,common-logging是日志实现 本项目使用slf4j + logback --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--实现slf4j并整合--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库相关--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--maven工作范围 驱动在真正工作的时候使用，故生命周期改为runtime--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--servlet web相关 jstl1.2以上版本就不需要standard这个包了，</span></span><br><span class="line"><span class="comment">        不然会报错： TLD skipped. URI: http://java.sun.com/jstl/core_rt is already defined--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;taglibs&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;standard&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;1.1.2&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--spring--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring核心--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-asm --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-asm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring dao--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;spring-data-mongodb&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;1.8.0.RELEASE&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.data/spring-data-mongodb --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mongo-java-driver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aop --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax/javaee-api --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaee-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-framework-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>mongo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>两个实体类：</p><p>Address.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lewis.mongo.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by liu on 2017/6/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String street;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">(String city, String street, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">        <span class="keyword">this</span>.street = street;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStreet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> street;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStreet</span><span class="params">(String street)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.street = street;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;city=&#x27;&quot;</span> + city + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, street=&#x27;&quot;</span> + street + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, num=&quot;</span> + num + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Person.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lewis.mongo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bson.types.ObjectId;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.mapping.Document;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by liu on 2017/6/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Document(collection = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> ObjectId id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectId <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(ObjectId id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> + <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JPA的dao，注意这里只要继承MongoRepository不用写注解spring就能认识这是个Repository，MongoRepository提供了基本的增删改查，不用实现便可直接调用，例如testMongo的personDao.save(persons);</p><p>PersonDao.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lewis.mongo.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lewis.mongo.entity.Person;</span><br><span class="line"><span class="keyword">import</span> org.bson.types.ObjectId;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.repository.MongoRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.repository.Query;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by liu on 2017/6/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonDao</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Person</span>, <span class="title">ObjectId</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(value = &quot;&#123;&#x27;age&#x27; : &#123;&#x27;$gte&#x27; : ?0, &#x27;$lte&#x27; : ?1&#125;, &#x27;name&#x27; : ?2&#125;&quot;, fields = &quot;&#123;&#x27;name&#x27; : 1, &#x27;age&#x27; : 1&#125;&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByAge</span><span class="params">(<span class="keyword">int</span> age1, <span class="keyword">int</span> age2, String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mongoTemplate的dao，PersonMongoDao.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lewis.mongo.mongoDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lewis.mongo.entity.Person;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by liu on 2017/6/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonMongoDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertPerson</span><span class="params">(Person user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removePerson</span><span class="params">(String userName)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updatePerson</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findForRequery</span><span class="params">(String userName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PersonMongoImpl.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lewis.mongo.mongoDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lewis.mongo.entity.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Query;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Update;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Criteria;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by liu on 2017/6/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository(&quot;personMongoImpl&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonMongoImpl</span> <span class="keyword">implements</span> <span class="title">PersonMongoDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mongoTemplate.findAll(Person.class, <span class="string">&quot;person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertPerson</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        mongoTemplate.insert(person, <span class="string">&quot;person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removePerson</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        mongoTemplate.remove(Query.query(Criteria.where(<span class="string">&quot;name&quot;</span>).is(userName)), <span class="string">&quot;person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mongoTemplate.updateMulti(Query.query(Criteria.where(<span class="string">&quot;age&quot;</span>).gt(<span class="number">3</span>).lte(<span class="number">5</span>)), Update.update(<span class="string">&quot;age&quot;</span>, <span class="number">3</span>), <span class="string">&quot;person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">findForRequery</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mongoTemplate.find(Query.query(Criteria.where(<span class="string">&quot;name&quot;</span>).is(userName)), Person.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JPA查询的测试类，PersonDaoTest.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lewis.mongo.dao.PersonDao;</span><br><span class="line"><span class="keyword">import</span> com.lewis.mongo.entity.Address;</span><br><span class="line"><span class="keyword">import</span> com.lewis.mongo.entity.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by liu on 2017/6/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//告诉junit spring配置文件</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&#123;&quot;classpath:spring/spring-context.xml&quot;, &quot;classpath:spring/spring-mongo.xml&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PersonDao personDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*先往数据库中插入10个person*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMongo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Person&gt; persons = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            persons.add(<span class="keyword">new</span> Person(<span class="string">&quot;name&quot;</span> + i, i, <span class="keyword">new</span> Address(<span class="string">&quot;广州市&quot;</span>, <span class="string">&quot;天河区&quot;</span>, i)));</span><br><span class="line">        &#125;</span><br><span class="line">        personDao.save(persons);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findMongo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(personDao.findByAge(<span class="number">2</span>, <span class="number">8</span>, <span class="string">&quot;name6&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mongoTemplate查询的测试类，MongoTemplateTest.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lewis.mongo.entity.Address;</span><br><span class="line"><span class="keyword">import</span> com.lewis.mongo.entity.Person;</span><br><span class="line"><span class="keyword">import</span> com.lewis.mongo.mongoDao.PersonMongoImpl;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by liu on 2017/6/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//告诉junit spring配置文件</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&#123;&quot;classpath:spring/spring-context.xml&quot;, &quot;classpath:spring/spring-mongo.xml&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoTemplateTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PersonMongoImpl personMongo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMongoTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//personMongo.insertPerson(new Person(&quot;Lewis&quot;,24,new Address(&quot;广州&quot;,&quot;天河&quot;,20)));</span></span><br><span class="line">        personMongo.removePerson(<span class="string">&quot;name3&quot;</span>);</span><br><span class="line">        personMongo.updatePerson();</span><br><span class="line">        System.out.println(personMongo.findAll());</span><br><span class="line">        System.out.println(personMongo.findForRequery(<span class="string">&quot;Lewis&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意测试前请先通过<code>PersonDaoTest.java</code>中的<code>testMongo()</code>方法向数据库中插入数据。</strong></p></blockquote><ul><li><strong>项目源码Git地址，仅供学习使用</strong>：<a href="https://github.com/wonderomg/SpringData-mongdb">https://github.com/wonderomg/SpringData-mongdb</a></li><li>参考资料：<a href="http://docs.spring.io/spring-data/mongodb/docs/current/reference/html/">http://docs.spring.io/spring-data/mongodb/docs/current/reference/html/</a></li><li>参考文章：<a href="http://www.imooc.com/article/13777">http://www.imooc.com/article/13777</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://wonderomg.github.io/categories/Java/">Java</category>
      
      
      <category domain="https://wonderomg.github.io/tags/SpingMvc/">SpingMvc</category>
      
      <category domain="https://wonderomg.github.io/tags/MongoDB/">MongoDB</category>
      
      <category domain="https://wonderomg.github.io/tags/SpringData/">SpringData</category>
      
      <category domain="https://wonderomg.github.io/tags/idea/">idea</category>
      
      <category domain="https://wonderomg.github.io/tags/maven/">maven</category>
      
      
      <comments>https://wonderomg.github.io/2017/06/06/idea%E6%90%AD%E5%BB%BAspringdata+mongodb+maven+springmvc/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>mybatis中的#{}和${}的区别</title>
      <link>https://wonderomg.github.io/2017/04/20/mybatis_operator/</link>
      <guid>https://wonderomg.github.io/2017/04/20/mybatis_operator/</guid>
      <pubDate>Wed, 19 Apr 2017 16:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;　　在使用&lt;code&gt;mybatis&lt;/code&gt;时都会用到&lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;和&lt;code&gt;$&amp;#123;&amp;#125;&lt;/code&gt;符号来进行传值，我们来看下两者的区别。</description>
      
      
      
      <content:encoded><![CDATA[<p>　　在使用<code>mybatis</code>时都会用到<code>#&#123;&#125;</code>和<code>$&#123;&#125;</code>符号来进行传值，我们来看下两者的区别。<span id="more"></span></p><h2 id="1-特征"><a href="#1-特征" class="headerlink" title="1. 特征"></a><strong>1. 特征</strong></h2><ol><li><code>#&#123;&#125;</code>将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号。如：<code>order by #user_id#</code>，如果传入的值是111,那么解析成sql时的值为<code>order by &quot;111&quot;</code>, 如果传入的值是id，则解析成的sql为<code>order by &quot;id&quot;</code> 。</li></ol><ol start="2"><li><p><code>$&#123;&#125;</code>将传入的数据直接显示生成在sql中。如：<code>order by $user_id$</code>，如果传入的值是111,那么解析成sql时的值为<code>order by 111</code>,  如果传入的值是id，则解析成的sql为<code>order by id</code>.</p></li><li><p><code>#&#123;&#125;</code>方式能够很大程度防止sql注入。</p></li><li><p><code>$&#123;&#125;</code>方式无法防止Sql注入。</p></li><li><p><code>$&#123;&#125;</code>方式一般用于传入数据库对象，例如传入表名。</p></li><li><p>一般能用<code>#&#123;&#125;</code>的就别用<code>$&#123;&#125;</code> 。</p></li></ol><blockquote><p><code>mybatis</code>排序时使用<code>order by </code>动态参数时需要注意，用<code>$&#123;&#125;</code>而不是<code>#&#123;&#125;</code></p></blockquote><h2 id="2-字符串替换"><a href="#2-字符串替换" class="headerlink" title="2. 字符串替换"></a><strong>2. 字符串替换</strong></h2><p>默认情况下，使用<code>#&#123;&#125;</code>格式的语法会导致<code>mybatis</code>创建预处理语句属性并以它为背景设置安全的值（比如?）。这样做很安全，很迅速也是首选做法，有时你只是想直接在SQL语句中插入一个不改变的字符串。比如，像<code>ORDER BY</code>，你可以这样来使用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> $&#123;columnName&#125;</span><br></pre></td></tr></table></figure><p>这里<code>mybatis</code>不会修改或转义字符串。</p><p><strong>重要：接受从用户输出的内容并提供给语句中不变的字符串，这样做是不安全的。这会导致潜在的SQL注入攻击，因此你不应该允许用户输入这些字段，或者通常自行转义并检查。</strong></p><h2 id="3-mybatis-本身的说明"><a href="#3-mybatis-本身的说明" class="headerlink" title="3. mybatis 本身的说明"></a><strong>3. mybatis 本身的说明</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String Substitution</span><br><span class="line"></span><br><span class="line">By default, using the #&#123;&#125; syntax will cause MyBatis to generate PreparedStatement properties and set the values safely against the PreparedStatement parameters (e.g. ?). While this is safer, faster and almost always preferred, sometimes you just want to directly inject a string unmodified into the SQL Statement. For example, for ORDER BY, you might use something like this:</span><br><span class="line"></span><br><span class="line">ORDER BY $&#123;columnName&#125;</span><br><span class="line">Here MyBatis won&#x27;t modify or escape the string.</span><br><span class="line"></span><br><span class="line">NOTE It&#x27;s not safe to accept input from a user and supply it to a statement unmodified in this way. This leads to potential SQL Injection attacks and therefore you should either disallow user input in these fields, or always perform your own escapes and checks.</span><br></pre></td></tr></table></figure><p>从上文可以看出：</p><ol><li>使用<code>#&#123;&#125;</code>格式的语法在<code>mybatis</code>中使用<code>Preparement</code>语句来安全的设置值，执行sql类似下面的：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line">ps.setInt(<span class="number">1</span>,id);</span><br></pre></td></tr></table></figure><p>这样做的好处是：更安全，更迅速，通常也是首选做法。</p><ol start="2"><li>不过有时你只是想直接在 SQL 语句中插入一个不改变的字符串。比如，像 <code>ORDER BY</code>，你可以这样来使用：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ORDER BY $&#123;columnName&#125;</span><br></pre></td></tr></table></figure><p>此时<code>mybatis</code> 不会修改或转义字符串。</p><p>这种方式类似于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Statement st = conn.createStatement();</span><br><span class="line">ResultSet rs = st.executeQuery(sql);</span><br></pre></td></tr></table></figure><p>这种方式的缺点是： </p><p>以这种方式接受从用户输出的内容并提供给语句中不变的字符串是不安全的，会导致潜在的 SQL 注入攻击，因此要么不允许用户输入这些字段，要么自行转义并检验。</p>]]></content:encoded>
      
      
      <category domain="https://wonderomg.github.io/categories/mybatis/">mybatis</category>
      
      
      <category domain="https://wonderomg.github.io/tags/mybatis/">mybatis</category>
      
      
      <comments>https://wonderomg.github.io/2017/04/20/mybatis_operator/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>前后端分离，前端跨域访问后台的两种方式</title>
      <link>https://wonderomg.github.io/2017/02/28/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%EF%BC%8C%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE%E5%90%8E%E5%8F%B0%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <guid>https://wonderomg.github.io/2017/02/28/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%EF%BC%8C%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE%E5%90%8E%E5%8F%B0%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <pubDate>Mon, 27 Feb 2017 16:00:00 GMT</pubDate>
      
      <description>&lt;blockquote&gt;
&lt;p&gt;​       在我们做web项目项目时，前端和后端都是不同的开发人员负责，到某个时间点必然要进行前后端数据交互，这时候就会遇到跨域问题。这里介绍两种解决方式。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>​       在我们做web项目项目时，前端和后端都是不同的开发人员负责，到某个时间点必然要进行前后端数据交互，这时候就会遇到跨域问题。这里介绍两种解决方式。</p></blockquote><span id="more"></span><h2 id="方式1：如果开发是tomcat服务器，在工程的web-xml添加设置"><a href="#方式1：如果开发是tomcat服务器，在工程的web-xml添加设置" class="headerlink" title="方式1：如果开发是tomcat服务器，在工程的web.xml添加设置"></a><strong>方式1：如果开发是tomcat服务器，在工程的web.xml添加设置</strong></h2><p>​        第一种方式是通过<code>CORS (Cross-Origin Resource Sharing)</code>跨域资源共享的方式实现。</p><p>​        在web.xml文件中设置CORS内容，如果后台开发人用的是tomcat服务器的话，则在web工程的web.xml文件中添加一下内容即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--解决tomcat部署跨域问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CORS<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.thetransactioncompany.cors.CORSFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.allowOrigin<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.supportedMethods<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>GET, POST, HEAD, PUT, DELETE<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.supportedHeaders<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Accept, Origin, X-Requested-With, Content-Type, Last-Modified<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.exposedHeaders<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Set-Cookie<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.supportsCredentials<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CORS<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是通过<code>CORS (Cross-Origin Resource Sharing)</code>跨域资源共享的方式实现。这种方式对chrome浏览器调试有点问题，firefox及IE调试正常。</p><h2 id="方式2：通过ajax和过滤器实现跨域"><a href="#方式2：通过ajax和过滤器实现跨域" class="headerlink" title="方式2：通过ajax和过滤器实现跨域"></a><strong>方式2：通过ajax和过滤器实现跨域</strong></h2><p>​        第二种方式是通过往请求消息头中加<code>Access-Control-Allow-Origin</code>。</p><p>​        <code>Access-Control-Allow-Origin</code>是<code>HTML5 </code>添加的新功能，设置这个属性值为你前端所在服务器的ip地址。</p><p>首先后台添加过滤器<code>AccessFilter.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: AccessFilter.java </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO(设置其他IP地址的机器可以直接访问本项目Url--工具filter) </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessFilter</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列ID，用来监测控制版本更新的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;test.mavenspring.project.allow.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String projectDemoAllowOriginUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;               </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置其他IP地址的机器可以直接访问到这个项目的后端</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="params"><span class="function">            FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        HttpServletResponse httpResponse = (HttpServletResponse) response;</span><br><span class="line">        httpResponse.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, projectDemoAllowOriginUrl);</span><br><span class="line">        httpResponse.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>,<span class="string">&quot;Origin, X-Requested-With, Content-Type, Accept&quot;</span>);</span><br><span class="line">        httpResponse.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        chain.doFilter(request, httpResponse);     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在前端js的ajax部分按照下面的方式设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajaxSettings.xhrFields = &#123;</span><br><span class="line">    <span class="attr">withCredentials</span> : <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="attr">crossDomain</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">type</span> : <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span> : <span class="string">&#x27;http://...&#x27;</span>,</span><br><span class="line">    <span class="attr">dataType</span> : <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span> : <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">    <span class="comment">//其他处理不变</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>默认情况下<code>widthCredentials</code>为<code>false</code>，我们需要设置<code>widthCredentials</code>为<code>true</code>。</p><p>有一点需要注意，设置了<code>widthCredentials</code>为<code>true</code>的请求中会包含远程域的所有<code>cookie</code>，但这些<code>cookie</code>仍然遵循同源策略，所以你是访问不了这些<code>cookie</code>的。<br>以上是我在实际项目中用到的两种方式，第一种方式用chrome调试会有点问题，第二种方式兼容性较好，主流浏览器调试正常。</p><blockquote><p><strong>不过一定要记得，这个仅仅作为前后端交互调试之用，</strong></p><p><strong>开发完成后记得删除这些跨域部分，</strong></p><p><strong>避免项目上线之后出现安全问题。切记！</strong></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://wonderomg.github.io/categories/Web/">Web</category>
      
      
      <category domain="https://wonderomg.github.io/tags/Java/">Java</category>
      
      <category domain="https://wonderomg.github.io/tags/Web/">Web</category>
      
      <category domain="https://wonderomg.github.io/tags/%E8%B7%A8%E5%9F%9F/">跨域</category>
      
      
      <comments>https://wonderomg.github.io/2017/02/28/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%EF%BC%8C%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE%E5%90%8E%E5%8F%B0%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>mongodb学习笔记--$elemMatch操作符的使用</title>
      <link>https://wonderomg.github.io/2017/02/21/mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--$elemMatch%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <guid>https://wonderomg.github.io/2017/02/21/mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--$elemMatch%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <pubDate>Mon, 20 Feb 2017 16:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;　　mongodb提供了很多操作符以便更加方便快捷地操作数据，下面我们来认识一下查询操作符&lt;code&gt;$elemMatch&lt;/code&gt;，&lt;code&gt;$elemMatch&lt;/code&gt;投影操作符将限制查询返回的数组字段的内容只包含匹配&lt;code&gt;$elemMatch&lt;/code&gt;条件的数组元素。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>　　mongodb提供了很多操作符以便更加方便快捷地操作数据，下面我们来认识一下查询操作符<code>$elemMatch</code>，<code>$elemMatch</code>投影操作符将限制查询返回的数组字段的内容只包含匹配<code>$elemMatch</code>条件的数组元素。</p><span id="more"></span><blockquote><p>注意：</p><ul><li>数组中元素是内嵌文档。</li><li>如果多个元素匹配<code>$elemMatch</code>条件，操作符返回数组中第一个匹配条件的元素。</li></ul></blockquote><h2 id="1-首先创建一个简单文档"><a href="#1-首先创建一个简单文档" class="headerlink" title="1.首先创建一个简单文档"></a><strong>1.首先创建一个简单文档</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.insert(&#123;<span class="string">&quot;id&quot;</span>:<span class="number">1</span>, <span class="string">&quot;members&quot;</span>:[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;BuleRiver1&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">27</span>, <span class="string">&quot;gender&quot;</span>:<span class="string">&quot;M&quot;</span>&#125;, &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;BuleRiver2&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">23</span>, <span class="string">&quot;gender&quot;</span>:<span class="string">&quot;F&quot;</span>&#125;, &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;BuleRiver3&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">21</span>, <span class="string">&quot;gender&quot;</span>:<span class="string">&quot;M&quot;</span>&#125;]&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-使用多种方式尝试查询"><a href="#2-使用多种方式尝试查询" class="headerlink" title="2.使用多种方式尝试查询"></a><strong>2.使用多种方式尝试查询</strong></h2><p>(1) 使用<code>db.test.find(&#123;&quot;members&quot;:&#123;&quot;name&quot;:&quot;BuleRiver1&quot;&#125;&#125;);</code>进行查询：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find(&#123;<span class="string">&quot;members&quot;</span>:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;BuleRiver1&quot;</span>&#125;&#125;);</span><br></pre></td></tr></table></figure><p>查询的结果是空集。</p><p>(2) 只有完全匹配一个的时候才能获取到结果，因此：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find(&#123;<span class="string">&quot;members&quot;</span>:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;BuleRiver1&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">27</span>, <span class="string">&quot;gender&quot;</span>:<span class="string">&quot;M&quot;</span>&#125;&#125;);</span><br></pre></td></tr></table></figure><p>可以得到结果。</p><p>(3) 如果把键值进行颠倒,也得不到结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find(&#123;<span class="string">&quot;members&quot;</span>:&#123;<span class="string">&quot;age&quot;</span>:<span class="number">27</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;BuleRiver1&quot;</span>, <span class="string">&quot;gender&quot;</span>:<span class="string">&quot;M&quot;</span>&#125;&#125;);</span><br></pre></td></tr></table></figure><p>得到的结果是空集。</p><p>(4) 我们这样查询：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find(&#123;<span class="string">&quot;members.name&quot;</span>:<span class="string">&quot;BuleRiver1&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>是可以查询出结果的。</p><p>(5) 如果需要两个属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find(&#123;<span class="string">&quot;members.name&quot;</span>:<span class="string">&quot;BuleRiver1&quot;</span>, <span class="string">&quot;members.age&quot;</span>:<span class="number">27</span>&#125;);</span><br></pre></td></tr></table></figure><p>也可以查询出结果。</p><p>(6) 我们再进行破坏性尝试：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find(&#123;<span class="string">&quot;members.name&quot;</span>:<span class="string">&quot;BuleRiver1&quot;</span>, <span class="string">&quot;members.age&quot;</span>:<span class="number">23</span>&#125;);</span><br></pre></td></tr></table></figure><p>也可以查询出结果。</p><p>不过我们应该注意到：<code>BuleRiver1</code>是数组中第一个元素的键值，而23是数组中第二个元素的键值，这样也可以查询出结果。</p><h2 id="3-使用-elemMatch操作符查询"><a href="#3-使用-elemMatch操作符查询" class="headerlink" title="3.使用$elemMatch操作符查询"></a><strong>3.使用$elemMatch操作符查询</strong></h2><p>　　对于我们的一些应用来说，以上结果显然不是我们想要的结果。所以我们应该使用<code>$elemMatch</code>操作符:</p><p>(1)``$elemMatch+同一个元素中的键值组合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find(&#123;<span class="string">&quot;members&quot;</span>:&#123;<span class="string">&quot;$elemMatch&quot;</span>:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;BuleRiver1&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">27</span>&#125;&#125;&#125;);</span><br></pre></td></tr></table></figure><p>可以查询出结果；</p><p>(2)<code>$elemMatch</code>+不同元素的键值组合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find(&#123;<span class="string">&quot;members&quot;</span>:&#123;<span class="string">&quot;$elemMatch&quot;</span>:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;BuleRiver1&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">23</span>&#125;&#125;&#125;);</span><br></pre></td></tr></table></figure><p>查询不出结果。</p><p>因此，(1)展示的嵌套查询正是我们想要的查询方式。</p>]]></content:encoded>
      
      
      <category domain="https://wonderomg.github.io/categories/mongodb/">mongodb</category>
      
      
      <category domain="https://wonderomg.github.io/tags/elemMatch%E6%9D%A1%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AC%A6/">elemMatch条件操作符</category>
      
      
      <comments>https://wonderomg.github.io/2017/02/21/mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--$elemMatch%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>mongodb学习笔记--$elemMatch操作符的使用</title>
      <link>https://wonderomg.github.io/2017/02/21/mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0elemMatch%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <guid>https://wonderomg.github.io/2017/02/21/mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0elemMatch%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <pubDate>Mon, 20 Feb 2017 16:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;　　mongodb提供了很多操作符以便更加方便快捷地操作数据，下面我们来认识一下查询操作符&lt;code&gt;$elemMatch&lt;/code&gt;，&lt;code&gt;$elemMatch&lt;/code&gt;投影操作符将限制查询返回的数组字段的内容只包含匹配&lt;code&gt;$elemMatch&lt;/code&gt;条件的数组元素。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>　　mongodb提供了很多操作符以便更加方便快捷地操作数据，下面我们来认识一下查询操作符<code>$elemMatch</code>，<code>$elemMatch</code>投影操作符将限制查询返回的数组字段的内容只包含匹配<code>$elemMatch</code>条件的数组元素。</p><span id="more"></span><blockquote><p>注意：</p><ul><li>数组中元素是内嵌文档。</li><li>如果多个元素匹配<code>$elemMatch</code>条件，操作符返回数组中第一个匹配条件的元素。</li></ul></blockquote><h2 id="1-首先创建一个简单文档"><a href="#1-首先创建一个简单文档" class="headerlink" title="1.首先创建一个简单文档"></a><strong>1.首先创建一个简单文档</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.insert(&#123;<span class="string">&quot;id&quot;</span>:<span class="number">1</span>, <span class="string">&quot;members&quot;</span>:[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;BuleRiver1&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">27</span>, <span class="string">&quot;gender&quot;</span>:<span class="string">&quot;M&quot;</span>&#125;, &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;BuleRiver2&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">23</span>, <span class="string">&quot;gender&quot;</span>:<span class="string">&quot;F&quot;</span>&#125;, &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;BuleRiver3&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">21</span>, <span class="string">&quot;gender&quot;</span>:<span class="string">&quot;M&quot;</span>&#125;]&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-使用多种方式尝试查询"><a href="#2-使用多种方式尝试查询" class="headerlink" title="2.使用多种方式尝试查询"></a><strong>2.使用多种方式尝试查询</strong></h2><p>(1) 使用<code>db.test.find(&#123;&quot;members&quot;:&#123;&quot;name&quot;:&quot;BuleRiver1&quot;&#125;&#125;);</code>进行查询：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find(&#123;<span class="string">&quot;members&quot;</span>:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;BuleRiver1&quot;</span>&#125;&#125;);</span><br></pre></td></tr></table></figure><p>查询的结果是空集。</p><p>(2) 只有完全匹配一个的时候才能获取到结果，因此：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find(&#123;<span class="string">&quot;members&quot;</span>:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;BuleRiver1&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">27</span>, <span class="string">&quot;gender&quot;</span>:<span class="string">&quot;M&quot;</span>&#125;&#125;);</span><br></pre></td></tr></table></figure><p>可以得到结果。</p><p>(3) 如果把键值进行颠倒,也得不到结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find(&#123;<span class="string">&quot;members&quot;</span>:&#123;<span class="string">&quot;age&quot;</span>:<span class="number">27</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;BuleRiver1&quot;</span>, <span class="string">&quot;gender&quot;</span>:<span class="string">&quot;M&quot;</span>&#125;&#125;);</span><br></pre></td></tr></table></figure><p>得到的结果是空集。</p><p>(4) 我们这样查询：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find(&#123;<span class="string">&quot;members.name&quot;</span>:<span class="string">&quot;BuleRiver1&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>是可以查询出结果的。</p><p>(5) 如果需要两个属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find(&#123;<span class="string">&quot;members.name&quot;</span>:<span class="string">&quot;BuleRiver1&quot;</span>, <span class="string">&quot;members.age&quot;</span>:<span class="number">27</span>&#125;);</span><br></pre></td></tr></table></figure><p>也可以查询出结果。</p><p>(6) 我们再进行破坏性尝试：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find(&#123;<span class="string">&quot;members.name&quot;</span>:<span class="string">&quot;BuleRiver1&quot;</span>, <span class="string">&quot;members.age&quot;</span>:<span class="number">23</span>&#125;);</span><br></pre></td></tr></table></figure><p>也可以查询出结果。</p><p>不过我们应该注意到：<code>BuleRiver1</code>是数组中第一个元素的键值，而23是数组中第二个元素的键值，这样也可以查询出结果。</p><h2 id="3-使用-elemMatch操作符查询"><a href="#3-使用-elemMatch操作符查询" class="headerlink" title="3.使用$elemMatch操作符查询"></a><strong>3.使用$elemMatch操作符查询</strong></h2><p>　　对于我们的一些应用来说，以上结果显然不是我们想要的结果。所以我们应该使用<code>$elemMatch</code>操作符:</p><p>(1)``$elemMatch+同一个元素中的键值组合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find(&#123;<span class="string">&quot;members&quot;</span>:&#123;<span class="string">&quot;$elemMatch&quot;</span>:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;BuleRiver1&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">27</span>&#125;&#125;&#125;);</span><br></pre></td></tr></table></figure><p>可以查询出结果；</p><p>(2)<code>$elemMatch</code>+不同元素的键值组合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find(&#123;<span class="string">&quot;members&quot;</span>:&#123;<span class="string">&quot;$elemMatch&quot;</span>:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;BuleRiver1&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">23</span>&#125;&#125;&#125;);</span><br></pre></td></tr></table></figure><p>查询不出结果。</p><p>因此，(1)展示的嵌套查询正是我们想要的查询方式。</p>]]></content:encoded>
      
      
      <category domain="https://wonderomg.github.io/categories/mongodb/">mongodb</category>
      
      
      <category domain="https://wonderomg.github.io/tags/elemMatch%E6%9D%A1%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AC%A6/">elemMatch条件操作符</category>
      
      
      <comments>https://wonderomg.github.io/2017/02/21/mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0elemMatch%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Socket send函数和recv函数详解</title>
      <link>https://wonderomg.github.io/2017/01/10/Socket_send%E5%87%BD%E6%95%B0%E5%92%8Crecv%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</link>
      <guid>https://wonderomg.github.io/2017/01/10/Socket_send%E5%87%BD%E6%95%B0%E5%92%8Crecv%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</guid>
      <pubDate>Mon, 09 Jan 2017 16:00:00 GMT</pubDate>
      
      <description>&lt;hr&gt;
&lt;h2 id=&quot;1-send-函数&quot;&gt;&lt;a href=&quot;#1-send-函数&quot; class=&quot;headerlink&quot; title=&quot;1. send 函数&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. send 函数&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;**int send( SOCKET s, const char FAR *buf, int len, int flags ); ** &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<hr><h2 id="1-send-函数"><a href="#1-send-函数" class="headerlink" title="1. send 函数"></a><strong>1. send 函数</strong></h2><p>**int send( SOCKET s, const char FAR *buf, int len, int flags ); ** </p><span id="more"></span><p>不论是客户还是服务器应用程序都用send函数来向TCP连接的另一端发送数据。客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。</p><p>​    该函数的第一个参数指定发送端套接字描述符；</p><p>​    第二个参数指明一个存放应用程序要发送数据的缓冲区；</p><p>​    第三个参数指明实际要发送的数据的字节数；</p><p>​    第四个参数一般置0。 </p><p>​    这里只描述<strong>同步Socket的send函数的执行流程</strong>。当调用该函数时，</p><p>   （1）send先比较待发送数据的长度len和套接字s的发送缓冲的长度， 如果len大于s的发送缓冲区的长度，该函数返回<code>SOCKET_ERROR</code>；</p><p>   （2）如果len小于或者等于s的发送缓冲区的长度，那么send先检查协议是否正在发送s的发送缓冲中的数据，如果是就等待协议把数据发送完，如果协议还没有开始发送s的发送缓冲中的数据或者s的发送缓冲中没有数据，那么send就比较s的发送缓冲区的剩余空间和len</p><p>   （3）如果len大于剩余空间大小，send就一直等待协议把s的发送缓冲中的数据发送完</p><p>   （4）如果len小于剩余 空间大小，send就仅仅把buf中的数据copy到剩余空间里（<strong>注意并不是send把s的发送缓冲中的数据传到连接的另一端的，而是协议传的，send仅仅是把buf中的数据copy到s的发送缓冲区的剩余空间里</strong>）。</p><p>​        如果send函数copy数据成功，就返回实际copy的字节数，如果send在copy数据时出现错误，那么send就返回SOCKET_ERROR；如果send在等待协议传送数据时网络断开的话，那么send函数也返回SOCKET_ERROR。</p><p>​       <strong>要注意send函数把buf中的数据成功copy到s的发送缓冲的剩余空间里后它就返回了，但是此时这些数据并不一定马上被传到连接的另一端</strong>。如果协议在后续的传送过程中出现网络错误的话，那么下一个Socket函数就会返回SOCKET_ERROR。（每一个除send外的Socket函数在执 行的最开始总要先等待套接字的发送缓冲中的数据被协议传送完毕才能继续，如果在等待时出现网络错误，那么该Socket函数就返回 SOCKET_ERROR）</p><blockquote><p><strong>注意：在Unix系统下，如果send在等待协议传送数据时网络断开的话，调用send的进程会接收到一个SIGPIPE信号，进程对该信号的默认处理是进程终止。</strong></p></blockquote><p>通过测试发现，异步socket的send函数在网络刚刚断开时还能发送返回相应的字节数，同时使用select检测也是可写的，但是过几秒钟之后，再send就会出错了，返回-1。select也不能检测出可写了。</p><h2 id="2-recv函数"><a href="#2-recv函数" class="headerlink" title="2. recv函数"></a><strong>2. recv函数</strong></h2><blockquote><p><strong>int recv( SOCKET s, char FAR *buf, int len, int flags);</strong></p></blockquote><p>不论是客户还是服务器应用程序都用recv函数从TCP连接的另一端接收数据。该函数的第一个参数指定接收端套接字描述符；</p><p>​    第二个参数指明一个缓冲区，该缓冲区用来存放recv函数接收到的数据；</p><p>​    第三个参数指明buf的长度；</p><p>​    第四个参数一般置0。</p><p>​    这里只描述<strong>同步Socket的recv函数的执行流程</strong>。当应用程序调用recv函数时，</p><p>​    （1）recv先等待s的发送缓冲中的数据被协议传送完毕，如果协议在传送s的发送缓冲中的数据时出现网络错误，那么recv函数返回<code>SOCKET_ERROR</code> ；</p><p>​    （2）如果s的发送缓冲中没有数据或者数据被协议成功发送完毕后，recv先检查套接字s的接收缓冲区，如果s接收缓冲区中没有数据或者协议正在接收数据，那么recv就一直等待，直到协议把数据接收完毕。当协议把数据接收完毕，recv函数就把s的接收缓冲中的数据copy到buf中（<strong>注意协议接收到的数据可能大于buf的长度，所以 在这种情况下要调用几次recv函数才能把s的接收缓冲中的数据copy完。recv函数仅仅是copy数据，真正的接收数据是协议来完成的</strong>）；</p><p>​    recv函数返回其实际copy的字节数。如果recv在copy时出错，那么它返回<code>SOCKET_ERROR</code>；如果recv函数在等待协议接收数据时网络中断了，那么它返回0。</p><blockquote><p><strong>注意：在Unix系统下，如果recv函数在等待协议接收数据时网络断开了，那么调用recv的进程会接收到一个SIGPIPE信号，进程对该信号的默认处理是进程终止。</strong></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://wonderomg.github.io/categories/C/">C++</category>
      
      <category domain="https://wonderomg.github.io/categories/C/Socket/">Socket</category>
      
      
      <category domain="https://wonderomg.github.io/tags/socket/">socket</category>
      
      <category domain="https://wonderomg.github.io/tags/C/">C++</category>
      
      
      <comments>https://wonderomg.github.io/2017/01/10/Socket_send%E5%87%BD%E6%95%B0%E5%92%8Crecv%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>mongodb学习笔记--C++操作mongodb</title>
      <link>https://wonderomg.github.io/2016/11/10/mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--C++%E6%93%8D%E4%BD%9Cmongodb/</link>
      <guid>https://wonderomg.github.io/2016/11/10/mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--C++%E6%93%8D%E4%BD%9Cmongodb/</guid>
      <pubDate>Wed, 09 Nov 2016 16:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;　　在学习mongodb过程当中，必须学习的就是用C++（Java、PHP、C#等）操作mongodb，这里讲述C++操作mongodb，在官方提供的mongo-cxx-driver驱动中有相关的操作例子，可以结合例子学习，目录是&lt;code&gt;mongo-cxx-driver-legacy-1.0.0-rc0\src\mongo\client\examples&lt;/code&gt;，这里针对几个重要的点讲述。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>　　在学习mongodb过程当中，必须学习的就是用C++（Java、PHP、C#等）操作mongodb，这里讲述C++操作mongodb，在官方提供的mongo-cxx-driver驱动中有相关的操作例子，可以结合例子学习，目录是<code>mongo-cxx-driver-legacy-1.0.0-rc0\src\mongo\client\examples</code>，这里针对几个重要的点讲述。</p><span id="more"></span><p>##<strong>1. C++连接mongodb</strong></p><p><strong>（1）<font color=#0000FF>有无密码都适用</font></strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mongo::client::GlobalInstance instance;</span><br><span class="line"><span class="keyword">if</span> (!instance.<span class="built_in">initialized</span>()) &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;failed to initialize the client driver: &quot;</span> &lt;&lt; instance.<span class="built_in">status</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::string uri = <span class="string">&quot;mongodb://username:password@127.0.0.1:27017&quot;</span>;</span><br><span class="line">std::string errmsg;</span><br><span class="line"></span><br><span class="line">ConnectionString cs = ConnectionString::<span class="built_in">parse</span>(uri, errmsg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!cs.<span class="built_in">isValid</span>()) &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Error parsing connection string &quot;</span> &lt;&lt; uri &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; errmsg &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">boost::scoped_ptr&lt;DBClientBase&gt; <span class="title">conn</span><span class="params">(cs.connect(errmsg))</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!conn) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;couldn&#x27;t connect : &quot;</span> &lt;&lt; errmsg &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　<font color=#0000FF>这种方式有密码和无密码的情况都适用，<code>&quot;username&quot;</code>为登录名，<code>&quot;password&quot;</code>为登录密码；无密码时去掉<code>&quot;username:password@&quot;</code>即可连接，这样连接方式比较常用。</font></p><p><strong>（2）常规连接操作（不带密码连接）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mongo::DBClientConnection conn; </span><br><span class="line">mongo::Status status = mongo::client::<span class="built_in">initialize</span>();</span><br><span class="line"><span class="keyword">if</span> (!status.<span class="built_in">isOK</span>()) &#123;</span><br><span class="line"><span class="function">MongoException <span class="title">m</span><span class="params">(<span class="number">-1</span>, <span class="string">&quot;failed to initialize the client driver: &quot;</span> + status.toString())</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">string url = <span class="string">&quot;localhost:27017&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (!conn.<span class="built_in">connect</span>(url, errmsg)) &#123;</span><br><span class="line"><span class="function">MongoException <span class="title">m</span><span class="params">(<span class="number">0</span>, <span class="string">&quot;couldn’t connect : &quot;</span> + errmsg)</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这种方式可建立与mongodb的连接，但是是未带权限的连接。</p><p><strong>（3）带密码连接</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn.<span class="built_in">auth</span>( <span class="string">&quot;admin&quot;</span> , <span class="string">&quot;username&quot;</span> , <span class="string">&quot;password&quot;</span> , errmsg );</span><br></pre></td></tr></table></figure><p>　　其中<code>&quot;admin&quot;</code>为验证用户的所在数据库，一般在<code>&quot;test.system.users&quot;</code>或<code>&quot;admin.system.users&quot;</code>表中，所以填库名<code>&quot;test&quot;</code>或<code>&quot;admin&quot;</code>，<code>&quot;username&quot;</code>为登录名，<code>&quot;password&quot;</code>为登录密码。<br>或者下面的auth方式也可以：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conn.<span class="built_in">auth</span>(<span class="built_in">BSON</span>(</span><br><span class="line"><span class="string">&quot;user&quot;</span> &lt;&lt; <span class="string">&quot;root&quot;</span> &lt;&lt; <span class="string">&quot;db&quot;</span> &lt;&lt; <span class="string">&quot;admin&quot;</span> &lt;&lt;</span><br><span class="line"><span class="string">&quot;pwd&quot;</span> &lt;&lt; <span class="string">&quot;password&quot;</span> &lt;&lt; <span class="string">&quot;mechanism&quot;</span> &lt;&lt; <span class="string">&quot;DEFAULT&quot;</span></span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>根据mongodb的设置更改传递给函数<code>conn.auth</code>的参数值。</p><p>##<strong>2. C++查询数据</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* ns = <span class="string">&quot;test.first&quot;</span>;</span><br><span class="line">conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObj</span>()); <span class="comment">//查询一条数据</span></span><br><span class="line">conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe&quot;</span>).<span class="built_in">obj</span>()); <span class="comment">//条件查询</span></span><br></pre></td></tr></table></figure><p>##<strong>3. C++插入数据</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* ns = <span class="string">&quot;test.first&quot;</span>;</span><br><span class="line">conn-&gt;<span class="built_in">insert</span>(ns, <span class="built_in">BSON</span>(<span class="string">&quot;name&quot;</span> &lt;&lt; <span class="string">&quot;joe&quot;</span> </span><br><span class="line">                      &lt;&lt; <span class="string">&quot;pwd&quot;</span> &lt;&lt; <span class="string">&quot;123456&quot;</span> </span><br><span class="line">                      &lt;&lt; <span class="string">&quot;age&quot;</span> &lt;&lt; <span class="number">20</span>));</span><br></pre></td></tr></table></figure><p>##<strong>4. C++删除数据</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* ns = <span class="string">&quot;test.first&quot;</span>;</span><br><span class="line">conn-&gt;<span class="built_in">remove</span>(ns, <span class="built_in">BSONObj</span>()); <span class="comment">//删除所有</span></span><br><span class="line">conn-&gt;<span class="built_in">remove</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe&quot;</span>).<span class="built_in">obj</span>()); <span class="comment">//删除指定文档</span></span><br></pre></td></tr></table></figure><p>##<strong>5. C++更新数据</strong></p><p><strong>(1) 在原数据基础上增加属性</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* ns = <span class="string">&quot;test.first&quot;</span>;</span><br><span class="line">BSONObj res = conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe&quot;</span>).<span class="built_in">obj</span>());</span><br><span class="line">BSONObj after = <span class="built_in">BSONObjBuilder</span>().<span class="built_in">appendElements</span>(res).<span class="built_in">append</span>(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;h&quot;</span>).<span class="built_in">obj</span>();</span><br><span class="line">conn-&gt;<span class="built_in">update</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jeo2&quot;</span>).<span class="built_in">obj</span>(), after);<span class="comment">//在原数据上增加属性</span></span><br></pre></td></tr></table></figure><p>这种update方式只是在原数据基础上增加属性，并不会改变指定属性值。<br><strong>(2) 更改指定的某个属性值</strong><br>**<font color=red>想要update指定属性的值，需要用到”$set”指令</font>**，如下代码所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BSONObj res = conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe&quot;</span>).<span class="built_in">obj</span>());</span><br><span class="line"><span class="comment">//更改指定的某个属性值</span></span><br><span class="line">conn-&gt;<span class="built_in">update</span>(<span class="string">&quot;test.first&quot;</span>, res, <span class="built_in">BSON</span>(<span class="string">&quot;$set&quot;</span> &lt;&lt; <span class="built_in">BSON</span>(<span class="string">&quot;age&quot;</span> &lt;&lt; <span class="number">11</span>)));</span><br></pre></td></tr></table></figure><p><font color=#0000FF>主要想强调下update更改指定的某个属性值的方式，比较常用。</font></p><p>##<strong>6. C++操作例子</strong><br>(1) simple_client_test.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#if defined(_WIN32)</span></span><br><span class="line"><span class="comment">#include &lt;winsock2.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;windows.h&gt;</span></span><br><span class="line"><span class="comment">#endif*/</span></span><br><span class="line"><span class="comment">//g++ simple_client_test.cpp -pthread -lmongoclient -lboost_thread -lboost_system -lboost_regex -o simple_client_test</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mongo/client/dbclient.h&quot;</span>  <span class="comment">// the mongo c++ driver</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> verify</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> verify(x) MONGO_verify(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> mongo;</span><br><span class="line"><span class="comment">//using mongo::BSONObj;</span></span><br><span class="line"><span class="comment">//using mongo::BSONObjBuilder;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;usage: &quot;</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; [MONGODB_URI]&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    mongo::client::GlobalInstance instance;</span><br><span class="line">    <span class="keyword">if</span> (!instance.<span class="built_in">initialized</span>()) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;failed to initialize the client driver: &quot;</span> &lt;&lt; instance.<span class="built_in">status</span>() &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::string uri = argc == <span class="number">2</span> ? argv[<span class="number">1</span>] : <span class="string">&quot;mongodb://127.0.0.1:27017&quot;</span>;</span><br><span class="line">    std::string errmsg;</span><br><span class="line"></span><br><span class="line">    ConnectionString cs = ConnectionString::<span class="built_in">parse</span>(uri, errmsg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!cs.<span class="built_in">isValid</span>()) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Error parsing connection string &quot;</span> &lt;&lt; uri &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; errmsg &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">boost::scoped_ptr&lt;DBClientBase&gt; <span class="title">conn</span><span class="params">(cs.connect(errmsg))</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!conn) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;couldn&#x27;t connect : &quot;</span> &lt;&lt; errmsg &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ns = <span class="string">&quot;test.first&quot;</span>;</span><br><span class="line"></span><br><span class="line">    conn-&gt;<span class="built_in">dropCollection</span>(ns);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//clean up old data from any previous tesets</span></span><br><span class="line">    conn-&gt;<span class="built_in">remove</span>(ns, <span class="built_in">BSONObj</span>());</span><br><span class="line">    <span class="built_in">verify</span>(conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObj</span>()).<span class="built_in">isEmpty</span>()); <span class="comment">//verify逻辑表达式，判断是否还存在test.first，是否clenn up成功</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//test insert</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;(1) test insert----&quot;</span> &lt;&lt; endl;</span><br><span class="line">    conn-&gt;<span class="built_in">insert</span>(ns, </span><br><span class="line">                 <span class="built_in">BSON</span>(<span class="string">&quot;name&quot;</span> &lt;&lt; <span class="string">&quot;joe&quot;</span> </span><br><span class="line">                      &lt;&lt; <span class="string">&quot;pwd&quot;</span> &lt;&lt; <span class="string">&quot;123456&quot;</span> </span><br><span class="line">                      &lt;&lt; <span class="string">&quot;age&quot;</span> &lt;&lt; <span class="number">20</span>));</span><br><span class="line">    <span class="built_in">verify</span>(!conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObj</span>()).<span class="built_in">isEmpty</span>());     <span class="comment">//判断是否添加成功</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;insert data : &quot;</span> &lt;&lt; conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObj</span>()) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;insert success!&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// test remove</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;(2) test remove----&quot;</span> &lt;&lt; endl;</span><br><span class="line">    conn-&gt;<span class="built_in">remove</span>(ns, <span class="built_in">BSONObj</span>());</span><br><span class="line">    <span class="built_in">verify</span>(conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObj</span>()).<span class="built_in">isEmpty</span>());</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;remove success!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// insert, findOne testing</span></span><br><span class="line">    conn-&gt;<span class="built_in">insert</span>(ns, </span><br><span class="line">                 <span class="built_in">BSON</span>(<span class="string">&quot;name&quot;</span> &lt;&lt; <span class="string">&quot;joe&quot;</span> </span><br><span class="line">                      &lt;&lt; <span class="string">&quot;pwd&quot;</span> &lt;&lt; <span class="string">&quot;234567&quot;</span> </span><br><span class="line">                      &lt;&lt; <span class="string">&quot;age&quot;</span> &lt;&lt; <span class="number">21</span>));</span><br><span class="line">    &#123;</span><br><span class="line">        BSONObj res = conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObj</span>());</span><br><span class="line">        <span class="built_in">verify</span>(<span class="built_in">strstr</span>(res.<span class="built_in">getStringField</span>(<span class="string">&quot;name&quot;</span>), <span class="string">&quot;joe&quot;</span>));</span><br><span class="line">        <span class="built_in">verify</span>(!<span class="built_in">strstr</span>(res.<span class="built_in">getStringField</span>(<span class="string">&quot;name2&quot;</span>), <span class="string">&quot;joe&quot;</span>));</span><br><span class="line">        <span class="built_in">verify</span>(<span class="number">21</span> == res.<span class="built_in">getIntField</span>(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;insert data : &quot;</span> &lt;&lt; conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObj</span>()) &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// test update</span></span><br><span class="line">    &#123;</span><br><span class="line">        BSONObj res = conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe&quot;</span>).<span class="built_in">obj</span>());</span><br><span class="line">        <span class="built_in">verify</span>(!<span class="built_in">strstr</span>(res.<span class="built_in">getStringField</span>(<span class="string">&quot;name2&quot;</span>), <span class="string">&quot;jeo&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        BSONObj after = <span class="built_in">BSONObjBuilder</span>().<span class="built_in">appendElements</span>(res).<span class="built_in">append</span>(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;w&quot;</span>).<span class="built_in">obj</span>();</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;(3) test update name joe add name2 name3----&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//upsert type1 update method</span></span><br><span class="line">        conn-&gt;<span class="built_in">update</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe&quot;</span>).<span class="built_in">obj</span>(), after);</span><br><span class="line">        <span class="comment">//res = conn-&gt;findOne(ns, BSONObjBuilder().append(&quot;name2&quot;, &quot;w&quot;).obj());</span></span><br><span class="line">        <span class="built_in">verify</span>(!<span class="built_in">strstr</span>(res.<span class="built_in">getStringField</span>(<span class="string">&quot;name2&quot;</span>), <span class="string">&quot;joe&quot;</span>));</span><br><span class="line">        <span class="built_in">verify</span>(conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe2&quot;</span>).<span class="built_in">obj</span>()).<span class="built_in">isEmpty</span>());</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot; update1 data: &quot; &lt;&lt; conn-&gt;findOne(ns, BSONObj()) &lt;&lt; endl;</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; update1 data : &quot;</span> &lt;&lt; conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">Query</span>(<span class="string">&quot;&#123;name2:&#x27;w&#x27;&#125;&quot;</span>)) &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//upsert type2 update method 更改指定的某个属性值 </span></span><br><span class="line">        <span class="keyword">const</span> string TEST_NS = <span class="string">&quot;test.first&quot;</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">update</span>(<span class="string">&quot;test.first&quot;</span>, res, <span class="built_in">BSON</span>(<span class="string">&quot;$set&quot;</span> &lt;&lt; <span class="built_in">BSON</span>(<span class="string">&quot;age&quot;</span> &lt;&lt; <span class="number">11</span>)));</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; update2 data : &quot;</span> &lt;&lt; conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObj</span>()) &lt;&lt; endl;</span><br><span class="line">        res = conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe&quot;</span>).<span class="built_in">obj</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//upsert type3 update method</span></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            after = <span class="built_in">BSONObjBuilder</span>().<span class="built_in">appendElements</span>(res).<span class="built_in">append</span>(<span class="string">&quot;name3&quot;</span>, <span class="string">&quot;h&quot;</span>).<span class="built_in">obj</span>();</span><br><span class="line">            conn-&gt;<span class="built_in">update</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe&quot;</span>).<span class="built_in">obj</span>(), after);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in"><span class="keyword">catch</span></span> (OperationException&amp;)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; update error: &quot;</span> &lt;&lt; conn-&gt;<span class="built_in">getLastErrorDetailed</span>().<span class="built_in">toString</span>() &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">verify</span>(!conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe&quot;</span>).<span class="built_in">obj</span>()).<span class="built_in">isEmpty</span>());</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot; update3 data: &quot; &lt;&lt; conn-&gt;findOne(ns, BSONObj()) &lt;&lt; endl;</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; update3 data : &quot;</span> &lt;&lt; conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">Query</span>(<span class="string">&quot;&#123;name3:&#x27;h&#x27;&#125;&quot;</span>)) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;(4) test query-----&quot;</span> &lt;&lt; <span class="string">&quot;\n query data : &quot;</span> </span><br><span class="line">            &lt;&lt; conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe&quot;</span>).<span class="built_in">obj</span>()) &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; Query data : &quot;</span> &lt;&lt; conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">Query</span>(<span class="string">&quot;&#123;name:&#x27;joe&#x27;&#125;&quot;</span>)) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(2) makefile文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CC = g++</span><br><span class="line">TEST = simple_client_test</span><br><span class="line"></span><br><span class="line">$(TEST):</span><br><span class="line">$(CC) $@.cpp -pthread -lmongoclient -lboost_thread -lboost_system -lboost_regex -o $@</span><br><span class="line">./$(TEST)</span><br><span class="line">rm -f $(TEST)</span><br><span class="line">run:</span><br><span class="line">./$(TEST)</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">rm -f $(TEST)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://wonderomg.github.io/categories/C/">C++</category>
      
      <category domain="https://wonderomg.github.io/categories/C/MongoDB/">MongoDB</category>
      
      
      <category domain="https://wonderomg.github.io/tags/C/">C++</category>
      
      <category domain="https://wonderomg.github.io/tags/mongodb/">mongodb</category>
      
      
      <comments>https://wonderomg.github.io/2016/11/10/mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--C++%E6%93%8D%E4%BD%9Cmongodb/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>mongodb学习笔记--C++操作mongodb</title>
      <link>https://wonderomg.github.io/2016/11/10/mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0C++%E6%93%8D%E4%BD%9Cmongodb/</link>
      <guid>https://wonderomg.github.io/2016/11/10/mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0C++%E6%93%8D%E4%BD%9Cmongodb/</guid>
      <pubDate>Wed, 09 Nov 2016 16:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;　　在学习mongodb过程当中，必须学习的就是用C++（Java、PHP、C#等）操作mongodb，这里讲述C++操作mongodb，在官方提供的mongo-cxx-driver驱动中有相关的操作例子，可以结合例子学习，目录是&lt;code&gt;mongo-cxx-driver-legacy-1.0.0-rc0\src\mongo\client\examples&lt;/code&gt;，这里针对几个重要的点讲述。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>　　在学习mongodb过程当中，必须学习的就是用C++（Java、PHP、C#等）操作mongodb，这里讲述C++操作mongodb，在官方提供的mongo-cxx-driver驱动中有相关的操作例子，可以结合例子学习，目录是<code>mongo-cxx-driver-legacy-1.0.0-rc0\src\mongo\client\examples</code>，这里针对几个重要的点讲述。</p><span id="more"></span><h2 id="1-C-连接mongodb"><a href="#1-C-连接mongodb" class="headerlink" title="1. C++连接mongodb"></a><strong>1. C++连接mongodb</strong></h2><p><strong>（1）<font color=#0000FF>有无密码都适用</font></strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mongo::client::GlobalInstance instance;</span><br><span class="line"><span class="keyword">if</span> (!instance.<span class="built_in">initialized</span>()) &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;failed to initialize the client driver: &quot;</span> &lt;&lt; instance.<span class="built_in">status</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::string uri = <span class="string">&quot;mongodb://username:password@127.0.0.1:27017&quot;</span>;</span><br><span class="line">std::string errmsg;</span><br><span class="line"></span><br><span class="line">ConnectionString cs = ConnectionString::<span class="built_in">parse</span>(uri, errmsg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!cs.<span class="built_in">isValid</span>()) &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Error parsing connection string &quot;</span> &lt;&lt; uri &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; errmsg &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">boost::scoped_ptr&lt;DBClientBase&gt; <span class="title">conn</span><span class="params">(cs.connect(errmsg))</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!conn) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;couldn&#x27;t connect : &quot;</span> &lt;&lt; errmsg &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　<font color=#0000FF>这种方式有密码和无密码的情况都适用，<code>&quot;username&quot;</code>为登录名，<code>&quot;password&quot;</code>为登录密码；无密码时去掉<code>&quot;username:password@&quot;</code>即可连接，这样连接方式比较常用。</font></p><p><strong>（2）常规连接操作（不带密码连接）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mongo::DBClientConnection conn; </span><br><span class="line">mongo::Status status = mongo::client::<span class="built_in">initialize</span>();</span><br><span class="line"><span class="keyword">if</span> (!status.<span class="built_in">isOK</span>()) &#123;</span><br><span class="line"><span class="function">MongoException <span class="title">m</span><span class="params">(<span class="number">-1</span>, <span class="string">&quot;failed to initialize the client driver: &quot;</span> + status.toString())</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">string url = <span class="string">&quot;localhost:27017&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (!conn.<span class="built_in">connect</span>(url, errmsg)) &#123;</span><br><span class="line"><span class="function">MongoException <span class="title">m</span><span class="params">(<span class="number">0</span>, <span class="string">&quot;couldn’t connect : &quot;</span> + errmsg)</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这种方式可建立与mongodb的连接，但是是未带权限的连接。</p><p><strong>（3）带密码连接</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn.<span class="built_in">auth</span>( <span class="string">&quot;admin&quot;</span> , <span class="string">&quot;username&quot;</span> , <span class="string">&quot;password&quot;</span> , errmsg );</span><br></pre></td></tr></table></figure><p>　　其中<code>&quot;admin&quot;</code>为验证用户的所在数据库，一般在<code>&quot;test.system.users&quot;</code>或<code>&quot;admin.system.users&quot;</code>表中，所以填库名<code>&quot;test&quot;</code>或<code>&quot;admin&quot;</code>，<code>&quot;username&quot;</code>为登录名，<code>&quot;password&quot;</code>为登录密码。<br>或者下面的auth方式也可以：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conn.<span class="built_in">auth</span>(<span class="built_in">BSON</span>(</span><br><span class="line"><span class="string">&quot;user&quot;</span> &lt;&lt; <span class="string">&quot;root&quot;</span> &lt;&lt; <span class="string">&quot;db&quot;</span> &lt;&lt; <span class="string">&quot;admin&quot;</span> &lt;&lt;</span><br><span class="line"><span class="string">&quot;pwd&quot;</span> &lt;&lt; <span class="string">&quot;password&quot;</span> &lt;&lt; <span class="string">&quot;mechanism&quot;</span> &lt;&lt; <span class="string">&quot;DEFAULT&quot;</span></span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>根据mongodb的设置更改传递给函数<code>conn.auth</code>的参数值。</p><h2 id="2-C-查询数据"><a href="#2-C-查询数据" class="headerlink" title="2. C++查询数据"></a><strong>2. C++查询数据</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* ns = <span class="string">&quot;test.first&quot;</span>;</span><br><span class="line">conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObj</span>()); <span class="comment">//查询一条数据</span></span><br><span class="line">conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe&quot;</span>).<span class="built_in">obj</span>()); <span class="comment">//条件查询</span></span><br></pre></td></tr></table></figure><h2 id="3-C-插入数据"><a href="#3-C-插入数据" class="headerlink" title="3. C++插入数据"></a><strong>3. C++插入数据</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* ns = <span class="string">&quot;test.first&quot;</span>;</span><br><span class="line">conn-&gt;<span class="built_in">insert</span>(ns, <span class="built_in">BSON</span>(<span class="string">&quot;name&quot;</span> &lt;&lt; <span class="string">&quot;joe&quot;</span> </span><br><span class="line">                      &lt;&lt; <span class="string">&quot;pwd&quot;</span> &lt;&lt; <span class="string">&quot;123456&quot;</span> </span><br><span class="line">                      &lt;&lt; <span class="string">&quot;age&quot;</span> &lt;&lt; <span class="number">20</span>));</span><br></pre></td></tr></table></figure><h2 id="4-C-删除数据"><a href="#4-C-删除数据" class="headerlink" title="4. C++删除数据"></a><strong>4. C++删除数据</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* ns = <span class="string">&quot;test.first&quot;</span>;</span><br><span class="line">conn-&gt;<span class="built_in">remove</span>(ns, <span class="built_in">BSONObj</span>()); <span class="comment">//删除所有</span></span><br><span class="line">conn-&gt;<span class="built_in">remove</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe&quot;</span>).<span class="built_in">obj</span>()); <span class="comment">//删除指定文档</span></span><br></pre></td></tr></table></figure><h2 id="5-C-更新数据"><a href="#5-C-更新数据" class="headerlink" title="5. C++更新数据"></a><strong>5. C++更新数据</strong></h2><p><strong>(1) 在原数据基础上增加属性</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* ns = <span class="string">&quot;test.first&quot;</span>;</span><br><span class="line">BSONObj res = conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe&quot;</span>).<span class="built_in">obj</span>());</span><br><span class="line">BSONObj after = <span class="built_in">BSONObjBuilder</span>().<span class="built_in">appendElements</span>(res).<span class="built_in">append</span>(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;h&quot;</span>).<span class="built_in">obj</span>();</span><br><span class="line">conn-&gt;<span class="built_in">update</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jeo2&quot;</span>).<span class="built_in">obj</span>(), after);<span class="comment">//在原数据上增加属性</span></span><br></pre></td></tr></table></figure><p>这种update方式只是在原数据基础上增加属性，并不会改变指定属性值。<br><strong>(2) 更改指定的某个属性值</strong><br>**<font color=red>想要update指定属性的值，需要用到”$set”指令</font>**，如下代码所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BSONObj res = conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe&quot;</span>).<span class="built_in">obj</span>());</span><br><span class="line"><span class="comment">//更改指定的某个属性值</span></span><br><span class="line">conn-&gt;<span class="built_in">update</span>(<span class="string">&quot;test.first&quot;</span>, res, <span class="built_in">BSON</span>(<span class="string">&quot;$set&quot;</span> &lt;&lt; <span class="built_in">BSON</span>(<span class="string">&quot;age&quot;</span> &lt;&lt; <span class="number">11</span>)));</span><br></pre></td></tr></table></figure><p><font color=#0000FF>主要想强调下update更改指定的某个属性值的方式，比较常用。</font></p><h2 id="6-C-操作例子"><a href="#6-C-操作例子" class="headerlink" title="6. C++操作例子"></a><strong>6. C++操作例子</strong></h2><p>(1) simple_client_test.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#if defined(_WIN32)</span></span><br><span class="line"><span class="comment">#include &lt;winsock2.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;windows.h&gt;</span></span><br><span class="line"><span class="comment">#endif*/</span></span><br><span class="line"><span class="comment">//g++ simple_client_test.cpp -pthread -lmongoclient -lboost_thread -lboost_system -lboost_regex -o simple_client_test</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mongo/client/dbclient.h&quot;</span>  <span class="comment">// the mongo c++ driver</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> verify</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> verify(x) MONGO_verify(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> mongo;</span><br><span class="line"><span class="comment">//using mongo::BSONObj;</span></span><br><span class="line"><span class="comment">//using mongo::BSONObjBuilder;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;usage: &quot;</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; [MONGODB_URI]&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    mongo::client::GlobalInstance instance;</span><br><span class="line">    <span class="keyword">if</span> (!instance.<span class="built_in">initialized</span>()) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;failed to initialize the client driver: &quot;</span> &lt;&lt; instance.<span class="built_in">status</span>() &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::string uri = argc == <span class="number">2</span> ? argv[<span class="number">1</span>] : <span class="string">&quot;mongodb://127.0.0.1:27017&quot;</span>;</span><br><span class="line">    std::string errmsg;</span><br><span class="line"></span><br><span class="line">    ConnectionString cs = ConnectionString::<span class="built_in">parse</span>(uri, errmsg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!cs.<span class="built_in">isValid</span>()) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Error parsing connection string &quot;</span> &lt;&lt; uri &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; errmsg &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">boost::scoped_ptr&lt;DBClientBase&gt; <span class="title">conn</span><span class="params">(cs.connect(errmsg))</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!conn) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;couldn&#x27;t connect : &quot;</span> &lt;&lt; errmsg &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ns = <span class="string">&quot;test.first&quot;</span>;</span><br><span class="line"></span><br><span class="line">    conn-&gt;<span class="built_in">dropCollection</span>(ns);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//clean up old data from any previous tesets</span></span><br><span class="line">    conn-&gt;<span class="built_in">remove</span>(ns, <span class="built_in">BSONObj</span>());</span><br><span class="line">    <span class="built_in">verify</span>(conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObj</span>()).<span class="built_in">isEmpty</span>()); <span class="comment">//verify逻辑表达式，判断是否还存在test.first，是否clenn up成功</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//test insert</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;(1) test insert----&quot;</span> &lt;&lt; endl;</span><br><span class="line">    conn-&gt;<span class="built_in">insert</span>(ns, </span><br><span class="line">                 <span class="built_in">BSON</span>(<span class="string">&quot;name&quot;</span> &lt;&lt; <span class="string">&quot;joe&quot;</span> </span><br><span class="line">                      &lt;&lt; <span class="string">&quot;pwd&quot;</span> &lt;&lt; <span class="string">&quot;123456&quot;</span> </span><br><span class="line">                      &lt;&lt; <span class="string">&quot;age&quot;</span> &lt;&lt; <span class="number">20</span>));</span><br><span class="line">    <span class="built_in">verify</span>(!conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObj</span>()).<span class="built_in">isEmpty</span>());     <span class="comment">//判断是否添加成功</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;insert data : &quot;</span> &lt;&lt; conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObj</span>()) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;insert success!&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// test remove</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;(2) test remove----&quot;</span> &lt;&lt; endl;</span><br><span class="line">    conn-&gt;<span class="built_in">remove</span>(ns, <span class="built_in">BSONObj</span>());</span><br><span class="line">    <span class="built_in">verify</span>(conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObj</span>()).<span class="built_in">isEmpty</span>());</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;remove success!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// insert, findOne testing</span></span><br><span class="line">    conn-&gt;<span class="built_in">insert</span>(ns, </span><br><span class="line">                 <span class="built_in">BSON</span>(<span class="string">&quot;name&quot;</span> &lt;&lt; <span class="string">&quot;joe&quot;</span> </span><br><span class="line">                      &lt;&lt; <span class="string">&quot;pwd&quot;</span> &lt;&lt; <span class="string">&quot;234567&quot;</span> </span><br><span class="line">                      &lt;&lt; <span class="string">&quot;age&quot;</span> &lt;&lt; <span class="number">21</span>));</span><br><span class="line">    &#123;</span><br><span class="line">        BSONObj res = conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObj</span>());</span><br><span class="line">        <span class="built_in">verify</span>(<span class="built_in">strstr</span>(res.<span class="built_in">getStringField</span>(<span class="string">&quot;name&quot;</span>), <span class="string">&quot;joe&quot;</span>));</span><br><span class="line">        <span class="built_in">verify</span>(!<span class="built_in">strstr</span>(res.<span class="built_in">getStringField</span>(<span class="string">&quot;name2&quot;</span>), <span class="string">&quot;joe&quot;</span>));</span><br><span class="line">        <span class="built_in">verify</span>(<span class="number">21</span> == res.<span class="built_in">getIntField</span>(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;insert data : &quot;</span> &lt;&lt; conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObj</span>()) &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// test update</span></span><br><span class="line">    &#123;</span><br><span class="line">        BSONObj res = conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe&quot;</span>).<span class="built_in">obj</span>());</span><br><span class="line">        <span class="built_in">verify</span>(!<span class="built_in">strstr</span>(res.<span class="built_in">getStringField</span>(<span class="string">&quot;name2&quot;</span>), <span class="string">&quot;jeo&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        BSONObj after = <span class="built_in">BSONObjBuilder</span>().<span class="built_in">appendElements</span>(res).<span class="built_in">append</span>(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;w&quot;</span>).<span class="built_in">obj</span>();</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;(3) test update name joe add name2 name3----&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//upsert type1 update method</span></span><br><span class="line">        conn-&gt;<span class="built_in">update</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe&quot;</span>).<span class="built_in">obj</span>(), after);</span><br><span class="line">        <span class="comment">//res = conn-&gt;findOne(ns, BSONObjBuilder().append(&quot;name2&quot;, &quot;w&quot;).obj());</span></span><br><span class="line">        <span class="built_in">verify</span>(!<span class="built_in">strstr</span>(res.<span class="built_in">getStringField</span>(<span class="string">&quot;name2&quot;</span>), <span class="string">&quot;joe&quot;</span>));</span><br><span class="line">        <span class="built_in">verify</span>(conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe2&quot;</span>).<span class="built_in">obj</span>()).<span class="built_in">isEmpty</span>());</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot; update1 data: &quot; &lt;&lt; conn-&gt;findOne(ns, BSONObj()) &lt;&lt; endl;</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; update1 data : &quot;</span> &lt;&lt; conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">Query</span>(<span class="string">&quot;&#123;name2:&#x27;w&#x27;&#125;&quot;</span>)) &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//upsert type2 update method 更改指定的某个属性值 </span></span><br><span class="line">        <span class="keyword">const</span> string TEST_NS = <span class="string">&quot;test.first&quot;</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">update</span>(<span class="string">&quot;test.first&quot;</span>, res, <span class="built_in">BSON</span>(<span class="string">&quot;$set&quot;</span> &lt;&lt; <span class="built_in">BSON</span>(<span class="string">&quot;age&quot;</span> &lt;&lt; <span class="number">11</span>)));</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; update2 data : &quot;</span> &lt;&lt; conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObj</span>()) &lt;&lt; endl;</span><br><span class="line">        res = conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe&quot;</span>).<span class="built_in">obj</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//upsert type3 update method</span></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            after = <span class="built_in">BSONObjBuilder</span>().<span class="built_in">appendElements</span>(res).<span class="built_in">append</span>(<span class="string">&quot;name3&quot;</span>, <span class="string">&quot;h&quot;</span>).<span class="built_in">obj</span>();</span><br><span class="line">            conn-&gt;<span class="built_in">update</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe&quot;</span>).<span class="built_in">obj</span>(), after);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in"><span class="keyword">catch</span></span> (OperationException&amp;)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; update error: &quot;</span> &lt;&lt; conn-&gt;<span class="built_in">getLastErrorDetailed</span>().<span class="built_in">toString</span>() &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">verify</span>(!conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe&quot;</span>).<span class="built_in">obj</span>()).<span class="built_in">isEmpty</span>());</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot; update3 data: &quot; &lt;&lt; conn-&gt;findOne(ns, BSONObj()) &lt;&lt; endl;</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; update3 data : &quot;</span> &lt;&lt; conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">Query</span>(<span class="string">&quot;&#123;name3:&#x27;h&#x27;&#125;&quot;</span>)) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;(4) test query-----&quot;</span> &lt;&lt; <span class="string">&quot;\n query data : &quot;</span> </span><br><span class="line">            &lt;&lt; conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">BSONObjBuilder</span>().<span class="built_in">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;joe&quot;</span>).<span class="built_in">obj</span>()) &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; Query data : &quot;</span> &lt;&lt; conn-&gt;<span class="built_in">findOne</span>(ns, <span class="built_in">Query</span>(<span class="string">&quot;&#123;name:&#x27;joe&#x27;&#125;&quot;</span>)) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(2) makefile文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CC = g++</span><br><span class="line">TEST = simple_client_test</span><br><span class="line"></span><br><span class="line">$(TEST):</span><br><span class="line">$(CC) $@.cpp -pthread -lmongoclient -lboost_thread -lboost_system -lboost_regex -o $@</span><br><span class="line">./$(TEST)</span><br><span class="line">rm -f $(TEST)</span><br><span class="line">run:</span><br><span class="line">./$(TEST)</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">rm -f $(TEST)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://wonderomg.github.io/categories/C/">C++</category>
      
      <category domain="https://wonderomg.github.io/categories/C/MongoDB/">MongoDB</category>
      
      
      <category domain="https://wonderomg.github.io/tags/C/">C++</category>
      
      <category domain="https://wonderomg.github.io/tags/mongodb/">mongodb</category>
      
      
      <comments>https://wonderomg.github.io/2016/11/10/mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0C++%E6%93%8D%E4%BD%9Cmongodb/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于=null和clear()问题（Java性能优化）</title>
      <link>https://wonderomg.github.io/2016/04/19/%E5%85%B3%E4%BA%8E=null%E5%92%8Cclear()%E9%97%AE%E9%A2%98(Java%E6%80%A7%E8%83%BD%E7%AF%87)/</link>
      <guid>https://wonderomg.github.io/2016/04/19/%E5%85%B3%E4%BA%8E=null%E5%92%8Cclear()%E9%97%AE%E9%A2%98(Java%E6%80%A7%E8%83%BD%E7%AF%87)/</guid>
      <pubDate>Mon, 18 Apr 2016 16:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;　　以ArrayList为例，根据情况来看吧，&lt;strong&gt;ArrayList内部维护的是一个数组&lt;/strong&gt;。</description>
      
      
      
      <content:encoded><![CDATA[<p>　　以ArrayList为例，根据情况来看吧，<strong>ArrayList内部维护的是一个数组</strong>。<span id="more"></span></p><h2 id="1-list-null"><a href="#1-list-null" class="headerlink" title="1. list = null"></a><strong>1. list = null</strong></h2><blockquote><p>那么你<strong>list = null; ** 就是</strong>释放这个数组对象，当然里面所引用的对象也就释放了**。</p></blockquote><h2 id="2-list-clear"><a href="#2-list-clear" class="headerlink" title="2. list.clear()"></a><strong>2. list.clear()</strong></h2><blockquote><p>如果<strong>list.clear();</strong> 看看源代码就知道了，是<strong>把list里面对象遍历赋值为null</strong>，意思就是<strong>释放list里面所有对象</strong>。</p></blockquote><p>　　这样就很清楚了，如果你这个list还需要使用，那么你可以使用clear去释放掉list里面所有的数据，GC在回收的时候就有可能回收掉原list里面的这些数据了。如果你都不需要了，那么你就用=null这样GC就有可能把list以及里面关联的一些数据也都回收了。</p><h2 id="3-咱们来看下clear-源码"><a href="#3-咱们来看下clear-源码" class="headerlink" title="3. 咱们来看下clear()源码"></a><strong>3. 咱们来看下clear()源码</strong></h2><p><code>clear()</code>源码解析：<br>If we take an <code>ArrayList</code> as an example, the <code>clear()</code> method does this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    modCount++;  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Let gc do its work </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)  </span><br><span class="line">        elementData[i] = <span class="keyword">null</span>;  </span><br><span class="line">        </span><br><span class="line">    size = <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　Basically, if elements of a List are not referenced anywhere else in the code there is really no need (or at least you do not gain anything) to call <code>clear()</code>. You also do not need to assign <code>null</code> to the List because it will be garbage collected as soon as it falls out of scope.<br><strong>译文：</strong><br>　　基本上，如果List中的元素没有被引用到代码中的其他地方，那么确实没有必要（或至少你没有获得任何东西）来调用<code>clear()</code>。 您也不需要为List指定<code>null</code>，因为它会在超出范围的情况下被垃圾回收。</p>]]></content:encoded>
      
      
      <category domain="https://wonderomg.github.io/categories/Java/">Java</category>
      
      
      <category domain="https://wonderomg.github.io/tags/Java/">Java</category>
      
      <category domain="https://wonderomg.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/">性能优化</category>
      
      
      <comments>https://wonderomg.github.io/2016/04/19/%E5%85%B3%E4%BA%8E=null%E5%92%8Cclear()%E9%97%AE%E9%A2%98(Java%E6%80%A7%E8%83%BD%E7%AF%87)/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>C++中sprintf函数的用法</title>
      <link>https://wonderomg.github.io/2015/07/21/C++%E4%B8%ADsprintf%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <guid>https://wonderomg.github.io/2015/07/21/C++%E4%B8%ADsprintf%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <pubDate>Mon, 20 Jul 2015 16:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;1-常用方式&quot;&gt;&lt;a href=&quot;#1-常用方式&quot; class=&quot;headerlink&quot; title=&quot;1.常用方式&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.常用方式&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;　　 &lt;code&gt;sprintf&lt;/code&gt;函数的功能与&lt;code&gt;printf&lt;/code&gt;函数的功能基本一样，只是它把结果输出到指定的字符串中了，看个例子就明白了：&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="1-常用方式"><a href="#1-常用方式" class="headerlink" title="1.常用方式"></a><strong>1.常用方式</strong></h2><p>　　 <code>sprintf</code>函数的功能与<code>printf</code>函数的功能基本一样，只是它把结果输出到指定的字符串中了，看个例子就明白了：</p><span id="more"></span><p>例：将<code>&quot;test,1,2&quot;</code>写入数组s中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *avgv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">40</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(s,<span class="string">&quot;%s%d%c&quot;</span>,<span class="string">&quot;test&quot;</span>,<span class="number">1</span>,<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    <span class="comment">/*第一个参数就是指向要写入的那个字符串的指针，剩下的就和printf()一样了</span></span><br><span class="line"><span class="comment">    你可以比较一下，这是向屏幕输入*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s%d%c&quot;</span>,<span class="string">&quot;test&quot;</span>,<span class="number">1</span>,<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译：</p><blockquote><p>g++ sprinftest.cpp -o sprinftest &amp;&amp; ./sprinftest</p></blockquote><p>输出结果：</p><blockquote><p>sprintftest12<br>sprintftest12</p></blockquote><h2 id="2-若”-s”等输出符在字符串中"><a href="#2-若”-s”等输出符在字符串中" class="headerlink" title="2.若”%s”等输出符在字符串中"></a><strong>2.若”%s”等输出符在字符串中</strong></h2><p>例：补全字符串str的缺省内容</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *avgv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[] = <span class="string">&quot;hel%co wo%sd! sp%stf test%d&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="built_in">strlen</span>(str)];</span><br><span class="line">    <span class="built_in">sprintf</span>(buf, str, <span class="string">&#x27;l&#x27;</span>, <span class="string">&quot;rl&quot;</span>, <span class="string">&quot;rin&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;str = &quot;</span>&lt;&lt; buf &lt;&lt; <span class="string">&quot;\nlen = &quot;</span> &lt;&lt;  <span class="built_in">strlen</span>(buf) &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译：</p><blockquote><p>g++ sprinftest.cpp -o sprinftest &amp;&amp; ./sprinftest</p></blockquote><p>输出结果：</p><blockquote><p>str = hello world! sprintf test1<br>len = 27</p></blockquote><p>这种形式也可以将多个字符值或字符串值赋值到字符串str中，有多少个输出符就后面就加多少个参数。</p>]]></content:encoded>
      
      
      <category domain="https://wonderomg.github.io/categories/C/">C++</category>
      
      
      <category domain="https://wonderomg.github.io/tags/sprintf/">sprintf</category>
      
      
      <comments>https://wonderomg.github.io/2015/07/21/C++%E4%B8%ADsprintf%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TCP长连接与短连接的区别</title>
      <link>https://wonderomg.github.io/2015/02/20/TCP%E9%95%BF%E8%BF%9E%E6%8E%A5%E4%B8%8E%E7%9F%AD%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <guid>https://wonderomg.github.io/2015/02/20/TCP%E9%95%BF%E8%BF%9E%E6%8E%A5%E4%B8%8E%E7%9F%AD%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <pubDate>Thu, 19 Feb 2015 16:00:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;1-TCP连接&quot;&gt;&lt;a href=&quot;#1-TCP连接&quot; class=&quot;headerlink&quot; title=&quot;1. TCP连接&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. TCP连接&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;​        当网络通信时采用TCP协议时，在真正的读写操作之前，&lt;code&gt;server&lt;/code&gt;与&lt;code&gt;client&lt;/code&gt;之间必须建立一个连接，当读写操作完成后，双方不再需要这个连接时它们可以释放这个连接，连接的建立是需要三次握手的，而释放则需要4次握手，所以说每个连接的建立都是需要资源消耗和时间消耗的。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="1-TCP连接"><a href="#1-TCP连接" class="headerlink" title="1. TCP连接"></a><strong>1. TCP连接</strong></h2><p>​        当网络通信时采用TCP协议时，在真正的读写操作之前，<code>server</code>与<code>client</code>之间必须建立一个连接，当读写操作完成后，双方不再需要这个连接时它们可以释放这个连接，连接的建立是需要三次握手的，而释放则需要4次握手，所以说每个连接的建立都是需要资源消耗和时间消耗的。</p><span id="more"></span><p>经典的三次握手示意图：</p><p><img src="http://pic002.cnblogs.com/images/2011/305779/2011062613192683.jpg" alt="三次握手"></p><p>经典的四次握手关闭图：</p><p><img src="http://pic002.cnblogs.com/images/2011/305779/2011062613210341.jpg" alt="四次握手"></p><h2 id="2-TCP短连接"><a href="#2-TCP短连接" class="headerlink" title="2. TCP短连接"></a><strong>2. TCP短连接</strong></h2><p>​        我们模拟一下TCP短连接的情况，<strong>client向server发起连接请求，server接到请求，然后双方建立连接。client向server发送消息，server回应client，然后一次读写就完成了，这时候双方任何一个都可以发起close操作，不过一般都是client先发起close操作。</strong></p><p><strong>为什么呢，一般的server不会回复完client后立即关闭连接的，当然不排除有特殊的情况。</strong></p><p>从上面的描述看，短连接一般只会在<code>client/server</code>间传递一次读写操作。</p><blockquote><p><strong>短连接的优点是：管理起来比较简单，存在的连接都是有用的连接，不需要额外的控制手段。</strong></p></blockquote><h2 id="3-TCP长连接"><a href="#3-TCP长连接" class="headerlink" title="3. TCP长连接"></a><strong>3. TCP长连接</strong></h2><p>​       接下来我们再模拟一下长连接的情况，<strong>client向server发起连接，server接受client连接，双方建立连接。Client与server完成一次读写之后，它们之间的连接并不会主动关闭，后续的读写操作会继续使用这个连接。</strong></p><p>​       首先说一下TCP/IP详解上讲到的TCP保活功能，保活功能主要为服务器应用提供，服务器应用希望知道客户主机是否崩溃，从而可以代表客户使用资源。如果客户已经消失，使得服务器上保留一个半开放的连接，而服务器又在等待来自客户端的数据，则服务器将应远等待客户端的数据，保活功能就是试图在服务器端检测到这种半开放的连接。</p><blockquote><p>如果一个给定的连接在两小时内没有任何的动作，则服务器就向客户发一个探测报文段，客户主机必须处于以下4个状态之一：</p><ol><li>客户主机依然正常运行，并从服务器可达。客户的TCP响应正常，而服务器也知道对方是正常的，服务器在两小时后将保活定时器复位。</li><li>客户主机已经崩溃，并且关闭或者正在重新启动。在任何一种情况下，客户的TCP都没有响应。服务端将不能收到对探测的响应，并在75秒后超时。服务器总共发送10个这样的探测 ，每个间隔75秒。如果服务器没有收到一个响应，它就认为客户主机已经关闭并终止连接。</li><li>客户主机崩溃并已经重新启动。服务器将收到一个对其保活探测的响应，这个响应是一个复位，使得服务器终止这个连接。</li><li>客户机正常运行，但是服务器不可达，这种情况与2类似，TCP能发现的就是没有收到探查的响应。</li></ol></blockquote><p>​        从上面可以看出，TCP保活功能主要为探测长连接的存活状况，不过这里存在一个问题，存活功能的探测周期太长，还有就是它只是探测TCP连接的存活，属于比较斯文的做法，遇到恶意的连接时，保活功能就不够使了。</p><blockquote><p><strong>在长连接的应用场景下，client端一般不会主动关闭它们之间的连接，client与server之间的连接如果一直不关闭的话，会存在一个问题，随着客户端连接越来越多，server早晚有扛不住的时候，这时候server端需要采取一些策略，</strong></p><ol><li>如关闭一些长时间没有读写事件发生的连接，这样可以避免一些恶意连接导致server端服务受损；</li><li>如果条件再允许就可以以客户端机器为颗粒度，限制每个客户端的最大长连接数，这样可以完全避免某个蛋疼的客户端连累后端服。</li></ol></blockquote><blockquote><p>长连接和短连接的产生在于client和server采取的关闭策略，具体的应用场景采用具体的策略，没有十全十美的选择，只有合适的选择。</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://wonderomg.github.io/categories/tcp/">tcp</category>
      
      
      <category domain="https://wonderomg.github.io/tags/tcp/">tcp</category>
      
      
      <comments>https://wonderomg.github.io/2015/02/20/TCP%E9%95%BF%E8%BF%9E%E6%8E%A5%E4%B8%8E%E7%9F%AD%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8C%BA%E5%88%AB/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
